
<div id='nodeSection1'>Standard methods</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts64>class</span><span class=rvts113> </span><span class=rvts233>MyClass</span><span class=rvts113> </span><span class=rvts64>implements</span><span class=rvts113> </span><span class=rvts233>Comparable</span><span class=rvts113>&lt;</span><span class=rvts233>MyClass</span><span class=rvts113>&gt;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// implement Comparable if the class has a natural (sorting) order</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts233>AutoCloseable</span><span class=rvts113> {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// implement AutoCloseable to enable try-with-resources</span></p>
<p><span class=rvts62><br></span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span><span class=rvts235>@Override</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span><span class=rvts64>public</span><span class=rvts113> </span><span class=rvts233>String</span><span class=rvts113> toString() {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// create a string representation</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts64>return</span><span class=rvts113> </span><span class=rvts217>"my class instance"</span><span class=rvts113>;</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; }</span></p>
<p><span class=rvts113><br></span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span><span class=rvts235>@Override</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span><span class=rvts64>public</span><span class=rvts113> </span><span class=rvts64>int</span><span class=rvts113> hashCode() {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// produce a hash code that won't change during the object's lifetime</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts64>return</span><span class=rvts113> 0;</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; }</span></p>
<p><span class=rvts113><br></span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span><span class=rvts235>@Override</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span><span class=rvts64>public</span><span class=rvts113> </span><span class=rvts64>boolean</span><span class=rvts113> equals(</span><span class=rvts233>Object</span><span class=rvts113> other) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// compare two objects (may be by value or by reference)</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts64>if</span><span class=rvts113> (</span><span class=rvts64>null</span><span class=rvts113> == other) </span><span class=rvts64>return</span><span class=rvts113> </span><span class=rvts64>false</span><span class=rvts113>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// handle comparisons with null gracefully</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts64>return</span><span class=rvts113> </span><span class=rvts64>this</span><span class=rvts113> == other;</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; }</span></p>
<p><span class=rvts113><br></span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span><span class=rvts235>@Override</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span><span class=rvts64>public</span><span class=rvts113> </span><span class=rvts233>MyClass</span><span class=rvts113> clone()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// mark as public (Object.clone() is a protected method)</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts64>throws</span><span class=rvts113> </span><span class=rvts233>CloneNotSupportedException</span><span class=rvts113> {</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts233>MyClass</span><span class=rvts113> clone = (</span><span class=rvts233>MyClass</span><span class=rvts113>) </span><span class=rvts64>super</span><span class=rvts113>.clone();&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// let the base class do its magick first</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// ...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // perform further deep-copy steps (if required)</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts64>return</span><span class=rvts113> clone;</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; }</span></p>
<p><span class=rvts113><br></span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span><span class=rvts235>@Override</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span><span class=rvts64>public</span><span class=rvts113> </span><span class=rvts64>int</span><span class=rvts113> compareTo(</span><span class=rvts233>MyClass</span><span class=rvts113> object) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// add comparatbility to classes with a natural order (if Comparable is implemented)</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts64>return</span><span class=rvts113> 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// return -1 (this &lt; object) / 0 / 1 (this &gt; object)</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; }</span></p>
<p><span class=rvts113><br></span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span><span class=rvts235>@Override</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span><span class=rvts64>protected</span><span class=rvts113> </span><span class=rvts64>void</span><span class=rvts113> finalize() {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// add this destructor-like method for auto-cleanup before garbage collection</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts64>try</span><span class=rvts113> {</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts64>this</span><span class=rvts113>.close();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// invoke the close() method and swallow possible exeptions</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </span><span class=rvts64>catch</span><span class=rvts113> (</span><span class=rvts233>Exception</span><span class=rvts113> exception) {}</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
<p><span class=rvts113><br></span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span><span class=rvts235>@Override</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span><span class=rvts64>public</span><span class=rvts113> </span><span class=rvts64>void</span><span class=rvts113> close() </span><span class=rvts64>throws</span><span class=rvts113> </span><span class=rvts233>Exception</span><span class=rvts113> {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// for try-with-resources (if AutoCloseable is implemented)</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// ..&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // cleanup unmanaged resources</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; }</span></p>
<p><span class=rvts113>}</span></p>
<p><span class=rvts113><br></span></p>
<p><br></p>
<p><br></p>

