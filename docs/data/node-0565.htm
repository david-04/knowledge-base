
<div id='nodeSection1'>TCP client</div>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts265>require</span><span class=rvts262> </span><span class=rvts266>'net/telnet'</span><span class=rvts262>                        </span><span class=rvts263># gem install net-telnet</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts262>connection = </span><span class=rvts267>Net</span><span class=rvts262>::</span><span class=rvts267>Telnet</span><span class=rvts262>::</span><span class=rvts265>new</span><span class=rvts262>(              </span><span class=rvts263># open a connection</span></p>
<p class=rvps12><span class=rvts262>  </span><span class=rvts266>'Host'</span><span class=rvts262> =&gt; </span><span class=rvts266>'localhost'</span><span class=rvts262>,</span></p>
<p class=rvps12><span class=rvts262>  </span><span class=rvts266>'Port'</span><span class=rvts262> =&gt; 1234,</span></p>
<p class=rvps12><span class=rvts262>  </span><span class=rvts266>'Telnetmode'</span><span class=rvts262> =&gt; </span><span class=rvts265>false</span></p>
<p class=rvps12><span class=rvts262>)</span></p>
<p class=rvps12><span class=rvts262>connection.</span><span class=rvts265>puts</span><span class=rvts262>(</span><span class=rvts266>"Hello world!"</span><span class=rvts262>)             </span><span class=rvts263># send data</span></p>
<p class=rvps12><span class=rvts262>connection.waitfor(</span><span class=rvts266>/./</span><span class=rvts262>) </span><span class=rvts265>do</span><span class=rvts262> |data|           </span><span class=rvts263># receive data</span></p>
<p class=rvps12><span class=rvts262>  </span><span class=rvts265>puts</span><span class=rvts262> data</span></p>
<p class=rvps12><span class=rvts265>end</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection2'>TCP server (socket)</div>
<p class=rvps12><span class=rvts265><br></span></p>
<p class=rvps12><span class=rvts265>require</span><span class=rvts262> </span><span class=rvts266>'socket'</span><span class=rvts262>                            </span><span class=rvts263># standard library</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts262>server = </span><span class=rvts267>TCPServer</span><span class=rvts262>.</span><span class=rvts265>new</span><span class=rvts262>(1234)                </span><span class=rvts263># create a server listing on the given port</span></p>
<p class=rvps12><span class=rvts265>loop</span><span class=rvts262> </span><span class=rvts265>do</span></p>
<p class=rvps12><span class=rvts262>  </span><span class=rvts267>Thread</span><span class=rvts262>.start(server.accept) </span><span class=rvts265>do</span><span class=rvts262> |stream|   </span><span class=rvts263># start a new thread for every incoming connection</span></p>
<p class=rvps12><span class=rvts262>    </span><span class=rvts265>while</span><span class=rvts262> line = stream.</span><span class=rvts265>gets</span><span class=rvts262>                </span><span class=rvts263># read the request line by line</span></p>
<p class=rvps12><span class=rvts262>      stream.</span><span class=rvts265>puts</span><span class=rvts262> </span><span class=rvts266>"Received #{line}"</span><span class=rvts262>        </span><span class=rvts263># send a reply</span></p>
<p class=rvps12><span class=rvts262>    </span><span class=rvts265>end</span></p>
<p class=rvps12><span class=rvts262>    stream.close                            </span><span class=rvts263># close the connection</span></p>
<p class=rvps12><span class=rvts262>  </span><span class=rvts265>end</span></p>
<p class=rvps12><span class=rvts265>end</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection3'>TCP server (gserver)</div>
<p><span class=rvts263><br></span></p>
<p class=rvps12><span class=rvts265>require</span><span class=rvts262> </span><span class=rvts266>'gserver'</span><span class=rvts262>                           </span><span class=rvts263># gem install gserver</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts265>class</span><span class=rvts262> </span><span class=rvts267>HelloServer &lt; GServer</span><span class=rvts262>                 </span><span class=rvts263># the server is implemented as a class</span></p>
<p class=rvps12><span class=rvts262>  </span><span class=rvts265>def</span><span class=rvts262> serve(stream)                         </span><span class=rvts263># callback handler for answering requests</span></p>
<p class=rvps12><span class=rvts262>    </span><span class=rvts265>if</span><span class=rvts262> </span><span class=rvts267>IO</span><span class=rvts262>.</span><span class=rvts265>select</span><span class=rvts262>([stream], </span><span class=rvts265>nil</span><span class=rvts262>, </span><span class=rvts265>nil</span><span class=rvts262>, 2)     </span><span class=rvts263># check if there is request data to read (and time out after 2 seconds)</span></p>
<p class=rvps12><span class=rvts262>      line = stream.</span><span class=rvts265>gets</span><span class=rvts262>                    </span><span class=rvts263># read request data (can be called without preceding IO.select (will block)</span></p>
<p class=rvps12><span class=rvts262>      stream.</span><span class=rvts265>puts</span><span class=rvts262>(</span><span class=rvts266>"Received message"</span><span class=rvts262>)       </span><span class=rvts263># send response data</span></p>
<p class=rvps12><span class=rvts262>      </span><span class=rvts265>self</span><span class=rvts262>.stop </span><span class=rvts265>if</span><span class=rvts262> line =~ </span><span class=rvts266>/shutdown/</span><span class=rvts262>       </span><span class=rvts263># stop the server</span></p>
<p class=rvps12><span class=rvts262>    </span><span class=rvts265>else</span></p>
<p class=rvps12><span class=rvts262>      </span><span class=rvts263># ...                                 # activities to perform if no request data was received for 2 seconds</span></p>
<p class=rvps12><span class=rvts262>    </span><span class=rvts265>end</span></p>
<p class=rvps12><span class=rvts262>  </span><span class=rvts265>end</span></p>
<p class=rvps12><span class=rvts265>end</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts262>server = </span><span class=rvts267>HelloServer</span><span class=rvts262>.</span><span class=rvts265>new</span><span class=rvts262>(                   </span><span class=rvts263># instantiate the server</span></p>
<p class=rvps12><span class=rvts262>  1234,                                     </span><span class=rvts263># port to bind to</span></p>
<p class=rvps12><span class=rvts262>  </span><span class=rvts266>'localhost'</span><span class=rvts262>,                              </span><span class=rvts263># host/interface to bind to</span></p>
<p class=rvps12><span class=rvts262>  4,                                        </span><span class=rvts263># maximum number of parallel connections</span></p>
<p class=rvps12><span class=rvts262>  </span><span class=rvts265>nil</span><span class=rvts262>,                                      </span><span class=rvts263># file handle for logging</span></p>
<p class=rvps12><span class=rvts262>  </span><span class=rvts265>true</span><span class=rvts262>                                      </span><span class=rvts263># enable or disable logging</span></p>
<p class=rvps12><span class=rvts262>)</span></p>
<p class=rvps12><span class=rvts262>server.start                                </span><span class=rvts263># run the server as a thread</span></p>
<p class=rvps12><span class=rvts262>server.join                                 </span><span class=rvts263># wait until the server thread(s) terminate(s)</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts267>GServer</span><span class=rvts262>.in_service?(1234)                   </span><span class=rvts263># check if a server is already listing on this port</span></p>
<p class=rvps12><span class=rvts265>until</span><span class=rvts262> server.stopped?                       </span><span class=rvts263># wait until the server stops</span></p>
<p class=rvps12><span class=rvts262>  </span><span class=rvts263># ...</span></p>
<p class=rvps12><span class=rvts265>end</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection4'>TCP server (webrick)</div>
<p class=rvps12><span class=rvts265><br></span></p>
<p class=rvps12><span class=rvts265>require</span><span class=rvts262> </span><span class=rvts266>'webrick'</span><span class=rvts262>                           </span><span class=rvts263># gem install webrick</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts262>server = </span><span class=rvts267>WEBrick</span><span class=rvts262>::</span><span class=rvts267>GenericServer</span><span class=rvts262>.</span><span class=rvts265>new</span><span class=rvts262>(        </span><span class=rvts263># create a generic server</span></p>
<p class=rvps12><span class=rvts262>   :Port =&gt; 1234 </span></p>
<p class=rvps12><span class=rvts262>)  </span></p>
<p class=rvps12><span class=rvts265>trap</span><span class=rvts262>(</span><span class=rvts266>"INT"</span><span class=rvts262>){ server.shutdown }              </span><span class=rvts263># register a SIGTERM handler</span></p>
<p class=rvps12><span class=rvts262>server.start </span><span class=rvts265>do</span><span class=rvts262> |stream|</span></p>
<p class=rvps12><span class=rvts262>   stream.</span><span class=rvts265>puts</span><span class=rvts262> </span><span class=rvts267>Time</span><span class=rvts262>.now                     </span><span class=rvts263># handle incoming requests</span></p>
<p class=rvps12><span class=rvts265>end</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p><br></p>
<p><br></p>

