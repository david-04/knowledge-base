
<div id='nodeSection1'>if</div>
<p><span class=rvts12><br></span></p>
<p class=rvps12><span class=rvts265>if </span><span class=rvts262>(condition) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// works like in Java</span></p>
<p class=rvps12><span class=rvts263>&nbsp; </span><span class=rvts262>println(</span><span class=rvts266>"true"</span><span class=rvts262>)</span></p>
<p class=rvps12><span class=rvts262>} </span><span class=rvts265>else </span><span class=rvts262>{</span></p>
<p class=rvps12><span class=rvts262>&nbsp; println(</span><span class=rvts266>"false"</span><span class=rvts262>)</span></p>
<p class=rvps12><span class=rvts262>}</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts265>val </span><span class=rvts262>x = </span><span class=rvts265>if </span><span class=rvts262>(condition) 1 </span><span class=rvts265>else </span><span class=rvts262>2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// if is an expression that returns a value</span></p>
<p class=rvps12><span class=rvts263><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection2'>Pattern matching / switch case</div>
<p><span class=rvts12><br></span></p>
<p class=rvps12><span class=rvts262>userName </span><span class=rvts265>match </span><span class=rvts262>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// can be applied to all objects</span></p>
<p class=rvps12><span class=rvts263>&nbsp; </span><span class=rvts265>case </span><span class=rvts266>"david" </span><span class=rvts262>=&gt; println(</span><span class=rvts266>"Hi David!"</span><span class=rvts262>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// no "break" required</span></p>
<p class=rvps12><span class=rvts263>&nbsp; </span><span class=rvts265>case </span><span class=rvts266>"patrick" </span><span class=rvts262>=&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// can contain multiple statements</span></p>
<p class=rvps12><span class=rvts263>&nbsp;&nbsp;&nbsp; </span><span class=rvts262>print(</span><span class=rvts266>"Hi "</span><span class=rvts262>)</span></p>
<p class=rvps12><span class=rvts262>&nbsp;&nbsp;&nbsp; print(</span><span class=rvts266>"Patrick!"</span><span class=rvts262>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
<p class=rvps12><span class=rvts262>&nbsp; </span><span class=rvts265>case </span><span class=rvts262>_ =&gt; println(</span><span class=rvts266>"Hi there!"</span><span class=rvts262>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// "_" is the default and must always be implemented (otherwise it might throw a MatchError)</span></p>
<p class=rvps12><span class=rvts262>}</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts265>val </span><span class=rvts262>user = userId </span><span class=rvts265>match </span><span class=rvts262>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// match is an expression that returns a value</span></p>
<p class=rvps12><span class=rvts263>&nbsp; </span><span class=rvts265>case </span><span class=rvts262>1 =&gt; </span><span class=rvts266>"David"</span></p>
<p class=rvps12><span class=rvts266>&nbsp; </span><span class=rvts265>case </span><span class=rvts262>2 =&gt; </span><span class=rvts266>"Patrick"</span></p>
<p class=rvps12><span class=rvts266>&nbsp; </span><span class=rvts265>case </span><span class=rvts262>_ =&gt; </span><span class=rvts266>"???"</span></p>
<p class=rvps12><span class=rvts262>}</span></p>
<p><span class=rvts269><br></span></p>
<p class=rvps11><span class=rvts268><br></span></p>
<p><span class=rvts268><br></span></p>
<p><span class=rvts269><br></span></p>
<p class=rvps12><span class=rvts265>case </span><span class=rvts262>`myVariable`&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// match against an object that's stored in a local variable</span></p>
<p class=rvps12><span class=rvts263><br></span></p>
<p class=rvps12><span class=rvts265>case </span><span class=rvts262>Person(</span><span class=rvts266>"John"</span><span class=rvts262>, Location(</span><span class=rvts266>"Melb"</span><span class=rvts262>, </span><span class=rvts266>"AU"</span><span class=rvts262>)) </span><span class=rvts263>// exact match against literals</span></p>
<p class=rvps12><span class=rvts265>case </span><span class=rvts262>Person(</span><span class=rvts266>"John"</span><span class=rvts262>, _)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// match any location</span></p>
<p class=rvps12><span class=rvts263><br></span></p>
<p class=rvps12><span class=rvts265>case </span><span class=rvts262>value: </span><span class=rvts277>String&nbsp;</span><span class=rvts262>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// match based on type</span></p>
<p class=rvps12><span class=rvts265>case </span><span class=rvts262>value: </span><span class=rvts274>Array</span><span class=rvts262>[Int]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// match generics</span></p>
<p class=rvps12><span class=rvts265>case </span><span class=rvts262>value: </span><span class=rvts277>Map</span><span class=rvts262>[keyType, valueType]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// generic types defined in variables</span></p>
<p class=rvps12><span class=rvts265>case </span><span class=rvts262>value: </span><span class=rvts277>Map</span><span class=rvts262>[_, _]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// match all type parameters</span></p>
<p class=rvps12><span class=rvts263><br></span></p>
<p class=rvps12><span class=rvts265>case </span><span class=rvts262>List(0, _, _)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// match lists with 3 elements</span></p>
<p class=rvps12><span class=rvts265>case </span><span class=rvts262>List(0, _*)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// match list with variable length</span></p>
<p class=rvps12><span class=rvts265>case </span><span class=rvts262>(_, </span><span class=rvts266>"John"</span><span class=rvts262>, _)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// match tuple</span></p>
<p class=rvps12><span class=rvts265>case </span><span class=rvts262>x1</span><span class=rvts282> </span><span class=rvts262>:: 0</span><span class=rvts282> </span><span class=rvts262>:: remainingList&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// decompose a list</span></p>
<p class=rvps12><span class=rvts263><br></span></p>
<p class=rvps12><span class=rvts265>case </span><span class=rvts262>Person(name, location)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// pass "name" and "location" to the handler</span></p>
<p class=rvps12><span class=rvts265>case </span><span class=rvts262>Person(name, Location(city, country))&nbsp; </span><span class=rvts263>// pass "name", "city" and "country" to the handler</span></p>
<p class=rvps12><span class=rvts265>case </span><span class=rvts262>Person(name, _)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// pass "name" to the handler</span></p>
<p class=rvps12><span class=rvts265>case </span><span class=rvts262>Person(name, loc@Location(_, </span><span class=rvts266>"AU"</span><span class=rvts262>))&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// pass "name" and "loc" to the handler</span></p>
<p class=rvps12><span class=rvts265>case </span><span class=rvts262>Person(name, loc@Location(city, </span><span class=rvts266>"AU"</span><span class=rvts262>)) </span><span class=rvts263>// pass "name", "loc" and "city" to the handler</span></p>
<p class=rvps12><span class=rvts263><br></span></p>
<p class=rvps12><span class=rvts265>case </span><span class=rvts262>_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// default (catch-all)</span></p>
<p class=rvps12><span class=rvts265>case </span><span class=rvts262>value</span><span class=rvts282>&nbsp;</span><span class=rvts262>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// same as above, pass the value in as parameter</span></p>
<p><span class=rvts9><br></span></p>
<p class=rvps11><span class=rvts268><br></span></p>
<p><span class=rvts268><br></span></p>
<p><span class=rvts9><br></span></p>
<p class=rvps12><span class=rvts265>val </span><span class=rvts262>fn: </span><span class=rvts274>PartialFunction</span><span class=rvts262>[Any, </span><span class=rvts274>Location</span><span class=rvts262>] = {&nbsp; </span><span class=rvts263>// pattern matching without default case can be used as a function </span></p>
<p class=rvps12><span class=rvts263>&nbsp; </span><span class=rvts265>case </span><span class=rvts262>Person(</span><span class=rvts266>"David"</span><span class=rvts262>, loc) =&gt; loc</span></p>
<p class=rvps12><span class=rvts262>}</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts265>if </span><span class=rvts262>(fn.isDefinedAt(david)) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// check via isDefinedAt if a case matches</span></p>
<p class=rvps12><span class=rvts263>&nbsp; </span><span class=rvts262>fn(david)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// call the function to get the case's result</span></p>
<p class=rvps12><span class=rvts262>} </span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection3'>for</div>
<p><span class=rvts12><br></span></p>
<p class=rvps12><span class=rvts265>for</span><span class=rvts262>(index</span><span class=rvts282> </span><span class=rvts262>&lt;- 1 to 4) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// 1 to 4 iterates from 1-4</span></p>
<p class=rvps12><span class=rvts263>&nbsp; // ...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 1 until 4 iterates from 1-3</span></p>
<p class=rvps12><span class=rvts262>}</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts265>for </span><span class=rvts262>(i &lt;- 1 to 10) </span><span class=rvts265>if </span><span class=rvts262>(2 &lt; i) </span><span class=rvts265>if </span><span class=rvts262>(i &lt; 7) {&nbsp; </span><span class=rvts263>// filtered loop (inline shortcut for nested if statements inside the loop)</span></p>
<p class=rvps12><span class=rvts263>&nbsp; // ...</span></p>
<p class=rvps12><span class=rvts262>}</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts265>for </span><span class=rvts262>(outer &lt;- 1 to 5)</span></p>
<p class=rvps12><span class=rvts265>if </span><span class=rvts262>(outer % 2 == 0)</span></p>
<p class=rvps12><span class=rvts265>for </span><span class=rvts262>(inner &lt;- 0 to outer)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// nested loop (inline shortcut for nested for/if statements)</span></p>
<p class=rvps12><span class=rvts265>if </span><span class=rvts262>(inner % 3 == outer % 3) {</span></p>
<p class=rvps12><span class=rvts263>&nbsp; // ...</span></p>
<p class=rvps12><span class=rvts262>}</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps11><span class=rvts268><br></span></p>
<p><span class=rvts268><br></span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts265>val </span><span class=rvts262>vector = </span><span class=rvts265>for </span><span class=rvts262>(i &lt;- 1 to 3) </span><span class=rvts265>yield </span><span class=rvts262>2 * i&nbsp; </span><span class=rvts263>// use "yield" to return the for-loop's results as an IndexedSeq (Vector)</span></p>
<p class=rvps12><span class=rvts265><br></span></p>
<p class=rvps11><span class=rvts268><br></span></p>
<p><span class=rvts268><br></span></p>
<p class=rvps12><span class=rvts265><br></span></p>
<p class=rvps12><span class=rvts265>for </span><span class=rvts262>(item</span><span class=rvts282> </span><span class=rvts262>&lt;- </span><span class=rvts275>List</span><span class=rvts262>(1, 2, 3)) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// iterate over all elements of a collection</span></p>
<p class=rvps12><span class=rvts263>&nbsp; // ...</span></p>
<p class=rvps12><span class=rvts262>}</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts265>for </span><span class=rvts262>((id, name) &lt;- </span><span class=rvts275>Map</span><span class=rvts262>(1 -&gt; </span><span class=rvts266>"David"</span><span class=rvts262>)) {&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// automatically de-compose maps' key-value tuples</span></p>
<p class=rvps12><span class=rvts263>&nbsp; // ...</span></p>
<p class=rvps12><span class=rvts262>}</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts265>for </span><span class=rvts262>(Some(id) &lt;- </span><span class=rvts275>List</span><span class=rvts262>(Some(1), </span><span class=rvts274>None</span><span class=rvts262>)) {&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// use pattern matching (filter out empty Optionals)</span></p>
<p class=rvps12><span class=rvts263>&nbsp; // ...&nbsp; </span></p>
<p class=rvps12><span class=rvts262>}</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection4'>while</div>
<p><span class=rvts12><br></span></p>
<p class=rvps12><span class=rvts265>while</span><span class=rvts262>(condition) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// while-loops do no return values</span></p>
<p class=rvps12><span class=rvts263>&nbsp; // ...</span></p>
<p class=rvps12><span class=rvts262>}</span></p>
<p><span class=rvts269><br></span></p>
<p><span class=rvts269><br></span></p>
<div id='nodeSection5'>do-while</div>
<p><span class=rvts12><br></span></p>
<p class=rvps12><span class=rvts265>do </span><span class=rvts262>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263>// do-loops do not return values</span></p>
<p class=rvps12><span class=rvts263>&nbsp; // ...</span></p>
<p class=rvps12><span class=rvts262>} </span><span class=rvts265>while</span><span class=rvts262>(condition)</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p><br></p>
<p><br></p>

