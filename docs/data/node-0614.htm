
<div id='nodeSection1'>Data types</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts45>boolean</span><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// can contruct via !!myString or Boolean(myString)</span></p>
<p><span class=rvts45>number</span><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// numeric value</span></p>
<p><span class=rvts45>string</span><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// text</span></p>
<p><span class=rvts42>"image"</span><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// can only be assignned string literals (use with union types: "lowercase"|"uppercase")</span></p>
<p><span class=rvts45>bigint</span><span class=rvts299>                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts300>// initialised via BigInt(123) or 123n</span></p>
<p><span class=rvts45>symbol</span><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// </span><span class=rvts44>ECMAScript 6</span><span class=rvts39>: unique+immutable identifier, create via: let s = Symbol() or Symbol("id")</span></p>
<p><span class=rvts45><br></span></p>
<p><span class=rvts45>any&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// untyped, can switch between any data types (like dynamic in C#)</span></p>
<p><span class=rvts45>unknown&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// same as any but requires typeckecking before it can be accessed</span></p>
<p class=rvps12><span class=rvts296><br></span></p>
<p><span class=rvts45>null&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// useful only in combination with --strictNullChecks (forbids assigning null)</span></p>
<p><span class=rvts45>undefined&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// usage: let myVariable: string | null = null;</span></p>
<p class=rvps12><span class=rvts296><br></span></p>
<p class=rvps12><span class=rvts251>myVariable == </span><span class=rvts64>null</span><span class=rvts251>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// == instead of === checks for null or undefined</span></p>
<p><span class=rvts45><br></span></p>
<p><span class=rvts110><br></span></p>
<div id='nodeSection2'>Return types</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts45>void&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// no return value (varaiables of this type can only be set to null or undefined)</span></p>
<p><span class=rvts45>never&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// the function never returns (e.g. always throws an exception or loops endlessly)</span></p>
<p><span class=rvts45>this&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// the class (context) on which a member function has been called (used as return type)</span></p>
<p><span class=rvts39><br></span></p>
<p><span class=rvts110><br></span></p>
<div id='nodeSection3'>Objects</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts41>{ name: </span><span class=rvts45>string</span><span class=rvts41>, age?: </span><span class=rvts45>number</span><span class=rvts41> }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// like an interface; an object that contains all the given properites</span></p>
<p><span class=rvts42>"id" </span><span class=rvts45>in </span><span class=rvts41>myObject&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// check if the object has a property with the given key</span></p>
<p><span class=rvts110><br></span></p>
<p><span class=rvts110><br></span></p>
<div id='nodeSection4'>Union and intersection types</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts45>string</span><span class=rvts41> | </span><span class=rvts45>number&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// union type: any of the specified types</span></p>
<p><span class=rvts45>Person</span><span class=rvts41> &amp; </span><span class=rvts45>Serializable&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// intersection type: must be an instance of all of these classes/interfaces</span></p>
<p><span class=rvts110><br></span></p>
<p class=rvps12><span class=rvts64>type</span><span class=rvts251> </span><span class=rvts288>Operation</span><span class=rvts251> = </span><span class=rvts289>"read"</span><span class=rvts251> | </span><span class=rvts289>"write"</span><span class=rvts251>;</span></p>
<p class=rvps12><span class=rvts64>type</span><span class=rvts251> </span><span class=rvts288>Result</span><span class=rvts251> = </span><span class=rvts289>"ok"</span><span class=rvts251> | </span><span class=rvts289>"nok"</span><span class=rvts251>;</span></p>
<p class=rvps12><span class=rvts64>type</span><span class=rvts251> </span><span class=rvts288>Log</span><span class=rvts251> = </span><span class=rvts289>`</span><span class=rvts251>${</span><span class=rvts288>Operation</span><span class=rvts251>}</span><span class=rvts289>_</span><span class=rvts251>${</span><span class=rvts288>Result</span><span class=rvts251>}</span><span class=rvts289>`</span><span class=rvts251>;        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// creates "read_ok" | "read_nok" | "write_ok" | "write_nok"</span></p>
<p><span class=rvts110><br></span></p>
<p><span class=rvts110><br></span></p>
<div id='nodeSection5'>Conditional types</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts110>Cow</span><span class=rvts41> </span><span class=rvts45>extends </span><span class=rvts110>Animal</span><span class=rvts41> ? </span><span class=rvts45>number</span><span class=rvts41> : </span><span class=rvts45>string&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// define a type based on inheritance of another type</span></p>
<p><span class=rvts39><br></span></p>
<p class=rvps12><span class=rvts64>type</span><span class=rvts251> Value&lt;</span><span class=rvts288>T</span><span class=rvts251> </span><span class=rvts64>extends</span><span class=rvts251> </span><span class=rvts289>"name"</span><span class=rvts251> | </span><span class=rvts289>"age"</span><span class=rvts251>&gt; =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// useful when dealing with generics</span></p>
<p class=rvps12><span class=rvts288>&nbsp;&nbsp;&nbsp; T</span><span class=rvts251> </span><span class=rvts64>extends</span><span class=rvts251> </span><span class=rvts289>"name"</span><span class=rvts251> ? </span><span class=rvts64>string</span><span class=rvts251> : </span><span class=rvts64>number</span><span class=rvts251>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
<p><span class=rvts45><br></span></p>
<p><span class=rvts110><br></span></p>
<div id='nodeSection6'>Functions</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts41>(p1:</span><span class=rvts45>string</span><span class=rvts41>, p2:</span><span class=rvts45>number</span><span class=rvts41>) =&gt; </span><span class=rvts45>boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// function (signature)</span></p>
<p><span class=rvts41>&lt;</span><span class=rvts110>T</span><span class=rvts41>&gt;(p1: </span><span class=rvts110>T</span><span class=rvts41>, p2: </span><span class=rvts110>T</span><span class=rvts41>) =&gt; </span><span class=rvts110>T</span><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// generic function (signature)</span></p>
<p><span class=rvts45>new</span><span class=rvts41> (p1: </span><span class=rvts45>string</span><span class=rvts41>, p2: </span><span class=rvts45>number</span><span class=rvts41>) =&gt; </span><span class=rvts110>IMyInterface</span><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// constructor that creates an IMyInterface obejct from p1+p2</span></p>
<p><span class=rvts9><br></span></p>
<p><span class=rvts110><br></span></p>
<div id='nodeSection7'>Type aliases</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts45>type</span><span class=rvts41> </span><span class=rvts110>MyDataType</span><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = </span><span class=rvts45>string</span><span class=rvts41> | </span><span class=rvts45>number</span><span class=rvts41>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// define custom data types (accepts function signatures as well)</span></p>
<p><span class=rvts45>type</span><span class=rvts41> </span><span class=rvts110>MyCallbackFuntionType</span><span class=rvts41> = (x: </span><span class=rvts45>string</span><span class=rvts41>) =&gt; </span><span class=rvts45>number</span><span class=rvts41>;</span></p>
<p><span class=rvts45>type</span><span class=rvts41> </span><span class=rvts110>MyDataType</span><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = { username: </span><span class=rvts45>number</span><span class=rvts41> };&nbsp; </span><span class=rvts39>// inline-style interface definition (avoid, rather use real interfaces)</span></p>
<p><span class=rvts45>type</span><span class=rvts41> </span><span class=rvts110>MyGenericDataType</span><span class=rvts41>&lt;</span><span class=rvts110>T</span><span class=rvts41>&gt;&nbsp; = </span><span class=rvts110>MyClass</span><span class=rvts41>&lt;</span><span class=rvts110>T</span><span class=rvts41>&gt;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// custom types can be generic as well</span></p>
<p><span class=rvts45>type</span><span class=rvts41> </span><span class=rvts110>MyStringType</span><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = </span><span class=rvts42>"small"</span><span class=rvts41> | </span><span class=rvts42>"large"</span><span class=rvts41>;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// a string that can only be assigned the values small or large</span></p>
<p><span class=rvts39></span><br><span class=rvts110><br></span></p>
<div id='nodeSection8'>Data types</div>
<p><span class=rvts12><br></span></p>
<p class=rvps12><span class=rvts64>let</span><span class=rvts251> sym1 = Symbol();                                </span><span class=rvts252>// create a new symbol</span></p>
<p class=rvps12><span class=rvts64>let</span><span class=rvts251> sym2 = Symbol(</span><span class=rvts289>"key"</span><span class=rvts251>);                           </span><span class=rvts252>// optionally pass a string</span></p>
<p class=rvps12><span class=rvts251><br></span></p>
<p class=rvps12><span class=rvts251>Symbol(</span><span class=rvts289>"key"</span><span class=rvts251>) !== Symbol(</span><span class=rvts289>"key"</span><span class=rvts251>)                     </span><span class=rvts252>// distinct symbol instances are never equal</span></p>
<p class=rvps12><span class=rvts251><br></span></p>
<p class=rvps12><span class=rvts64>const</span><span class=rvts251> mySymbol = Symbol();</span></p>
<p class=rvps12><span class=rvts64>let</span><span class=rvts251> myObject = { [mySymbol]: </span><span class=rvts289>"value"</span><span class=rvts251> };             </span><span class=rvts252>// can be use as object key</span></p>
<p class=rvps12><span class=rvts64>class</span><span class=rvts251> </span><span class=rvts288>MyClass</span><span class=rvts251> { [mySymbol]() { </span><span class=rvts64>return</span><span class=rvts251> 0 } }         </span><span class=rvts252>// ...and in classes as well</span></p>
<p class=rvps12><span class=rvts251>myObject[mySymbol]                                  </span><span class=rvts252>// invocation</span></p>
<p class=rvps12><span class=rvts64>new</span><span class=rvts251> MyClass()[myKey]()</span></p>
<p class=rvps12><span class=rvts251><br></span></p>
<p class=rvps12><span class=rvts64>const</span><span class=rvts251> myKey = </span><span class=rvts289>"key"</span><span class=rvts251>;                                </span><span class=rvts252>// works with strings as well</span></p>
<p class=rvps12><span class=rvts64>let</span><span class=rvts251> myObject = { [myKey]: </span><span class=rvts289>"value"</span><span class=rvts251> };</span></p>
<p class=rvps12><span class=rvts64>class</span><span class=rvts251> </span><span class=rvts288>MyClass</span><span class=rvts251> { [myKey]() { </span><span class=rvts64>return</span><span class=rvts251> 0 } };</span></p>
<p class=rvps12><span class=rvts251>myObject[myKey];</span></p>
<p class=rvps12><span class=rvts64>new</span><span class=rvts251> MyClass()[myKey]()</span></p>
<p class=rvps12><span class=rvts251><br></span></p>
<p class=rvps11><span class=rvts268><br></span></p>
<p><span class=rvts268><br></span></p>
<p class=rvps12><span class=rvts251><br></span></p>
<p class=rvps12><span class=rvts251>Symbol.toPrimitive&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// convert a value to the corresponding primitive value</span></p>
<p class=rvps12><span class=rvts251>Symbol.toStringTag&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// called by Object.prototype.toString</span></p>
<p class=rvps12><span class=rvts251><br></span></p>
<p class=rvps12><span class=rvts251>Symbol.match&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// called by String.prototype.match</span></p>
<p class=rvps12><span class=rvts251>Symbol.replace&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// called by String.prototype.replace</span></p>
<p class=rvps12><span class=rvts251>Symbol.search&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// called by String.prototype.search</span></p>
<p class=rvps12><span class=rvts251>Symbol.split&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// called by String.prototype.split</span></p>
<p class=rvps12><span class=rvts251><br></span></p>
<p class=rvps12><span class=rvts251>Symbol.isConcatSpreadable&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// boolean indicating that an object should be flattened to its array elements by Array.prototype.concat</span></p>
<p class=rvps12><span class=rvts251>Symbol.iterator&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// a method that returns an iterator</span></p>
<p class=rvps12><span class=rvts251><br></span></p>
<p class=rvps12><span class=rvts251>Symbol.hasInstance&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// A method that determines if a constructor object recognizes an object as one of the constructor</span><span class=rvts301>’</span><span class=rvts252>s instances. Called by the semantics of the instanceof operator.</span></p>
<p class=rvps12><span class=rvts251>Symbol.species&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>//  A function valued property that is the constructor function that is used to create derived objects.</span></p>
<p class=rvps12><span class=rvts251>Symbol.unscopables&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// An Object whose own property names are property names that are excluded from the </span><span class=rvts301>‘</span><span class=rvts252>with</span><span class=rvts301>’</span><span class=rvts252> environment bindings of the associated objects.</span></p>
<p><br></p>
<p><br></p>

