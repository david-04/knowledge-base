
<div id='nodeSection1'>Structure</div>
<p><span class=rvts8><br></span></p>
<ul class=list2>
<li class=rvps10 style="margin-left: 0px; text-indent: 0px"><span class=rvts8>a Gradle build contains one or more projects (i.e. artifacts)</span></li>
<li class=rvps10 style="margin-left: 0px; text-indent: 0px"><span class=rvts8>a project consists of tasks (equivalent to ANT tasks like compile, pack...)</span></li>
</ul>
<p><span class=rvts8><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection2'>Tasks</div>
<p><span class=rvts8><br></span></p>
<p class=rvps12><span class=rvts124>task myTask {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts125>// a task can be invoked via ./gradlew playground</span></p>
<p class=rvps12><span class=rvts125>&nbsp;&nbsp;&nbsp; </span><span class=rvts124>println </span><span class=rvts128>'always displayed'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts125>// everything outside the doLast is executed sequentially on script startup</span></p>
<p class=rvps12><span class=rvts125>&nbsp;&nbsp;&nbsp; </span><span class=rvts124>4.times {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts125>// repeat a command commands multiple times</span></p>
<p class=rvps12><span class=rvts125>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts124>println it</span></p>
<p class=rvps12><span class=rvts124>&nbsp;&nbsp;&nbsp; }</span></p>
<p class=rvps12><span class=rvts124>&nbsp;&nbsp;&nbsp; doFirst {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts125>// run on startup</span></p>
<p class=rvps12><span class=rvts125>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts325>if </span><span class=rvts124>(!project.hasProperty(</span><span class=rvts128>'...'</span><span class=rvts124>)) {</span></p>
<p class=rvps12><span class=rvts124>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts325>throw </span><span class=rvts138>StopExecutionException</span><span class=rvts124>()&nbsp; </span><span class=rvts125>// the task from being executed</span></p>
<p class=rvps12><span class=rvts125>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts124>}</span></p>
<p class=rvps12><span class=rvts124>&nbsp;&nbsp;&nbsp; }</span></p>
<p class=rvps12><span class=rvts124>&nbsp;&nbsp;&nbsp; doLast {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts125>// run this command when the command is actually to be executed</span></p>
<p class=rvps12><span class=rvts125>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts138>String </span><span class=rvts124>str = </span><span class=rvts128>'test'</span></p>
<p class=rvps12><span class=rvts128>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts124>println str.toUpperCase()</span></p>
<p class=rvps12><span class=rvts124>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; str.each {</span></p>
<p class=rvps12><span class=rvts124>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; println </span><span class=rvts128>"</span><span class=rvts124>${it} </span><span class=rvts128>"</span></p>
<p class=rvps12><span class=rvts128>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts124>}</span></p>
<p class=rvps12><span class=rvts124>&nbsp;&nbsp;&nbsp; }</span></p>
<p class=rvps12><span class=rvts124>}</span></p>
<p class=rvps12><span class=rvts124><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection3'>Execution order</div>
<p><span class=rvts8><br></span></p>
<ul class=list2>
<li class=rvps19 style="margin-left: 0px; text-indent: 0px"><span class=rvts124>everything outside doFirst and doLast is executed on startup (even in tasks that won't be run)</span></li>
<li class=rvps19 style="margin-left: 0px; text-indent: 0px"><span class=rvts124>the chosen tasks dependencies are executed</span></li>
<li class=rvps19 style="margin-left: 0px; text-indent: 0px"><span class=rvts124>the task's doFirst runs</span></li>
<li class=rvps19 style="margin-left: 0px; text-indent: 0px"><span class=rvts124>the task's doLast runs</span></li>
</ul>
<p class=rvps12><span class=rvts124><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection4'>Conditional execution</div>
<p><span class=rvts8><br></span></p>
<p class=rvps12><span class=rvts124>task myTask {</span></p>
<p class=rvps12><span class=rvts124>&nbsp;&nbsp;&nbsp; onlyIf {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts125>// disable the task if the given condition is not met</span></p>
<p class=rvps12><span class=rvts125>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts124>project.hasProperty(</span><span class=rvts128>'missing'</span><span class=rvts124>)</span></p>
<p class=rvps12><span class=rvts124>&nbsp;&nbsp;&nbsp; }</span></p>
<p class=rvps12><span class=rvts124>&nbsp;&nbsp;&nbsp; doFirst {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts125>// runs as a precursor to doLast (i.e. before the task is executed)</span></p>
<p class=rvps12><span class=rvts125>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts325>if </span><span class=rvts124>(!project.hasProperty(</span><span class=rvts128>'...'</span><span class=rvts124>)) {</span></p>
<p class=rvps12><span class=rvts124>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts325>throw </span><span class=rvts138>StopExecutionException</span><span class=rvts124>()&nbsp; </span><span class=rvts125>// throw an exception to prevent the task from being executed</span></p>
<p class=rvps12><span class=rvts125>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts124>}</span></p>
<p class=rvps12><span class=rvts124>&nbsp;&nbsp;&nbsp; }</span></p>
<p class=rvps12><span class=rvts124>&nbsp;&nbsp;&nbsp; doLast {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts125>// run this command at the end of the task</span></p>
<p class=rvps12><span class=rvts125>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts124>println </span><span class=rvts128>'Hello world!'</span></p>
<p class=rvps12><span class=rvts128>&nbsp;&nbsp;&nbsp; </span><span class=rvts124>}</span></p>
<p class=rvps12><span class=rvts124>}</span></p>
<p class=rvps12><span class=rvts124><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection5'>Dependencies</div>
<p><span class=rvts8><br></span></p>
<p class=rvps12><span class=rvts137>task </span><span class=rvts124>myTask2 (</span><span class=rvts128>dependsOn</span><span class=rvts124>: myTask1) { ... }&nbsp;&nbsp; </span><span class=rvts125>// use arrays for multiple dependencies: [myTask0, myTask1]</span></p>
<p class=rvps12><span class=rvts125><br></span></p>
<p class=rvps12><span class=rvts124>myTask2.dependsOn myTask1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts125>// alternative syntax to the above (declared separately)</span></p>
<p class=rvps12><span class=rvts125><br></span></p>
<p class=rvps12><span class=rvts124>myTask2.dependsOn {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts125>// use a closure to dynamically determine the dependencies</span></p>
<p class=rvps12><span class=rvts125>&nbsp;&nbsp;&nbsp; </span><span class=rvts124>tasks.findAll {</span></p>
<p class=rvps12><span class=rvts124>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; task -&gt; task.name.startsWith(</span><span class=rvts128>'...'</span><span class=rvts124>)</span></p>
<p class=rvps12><span class=rvts124>&nbsp;&nbsp;&nbsp; }</span></p>
<p class=rvps12><span class=rvts124>}</span></p>
<p class=rvps12><span class=rvts124><br></span></p>
<p><br></p>
<p><br></p>
</body></html>

