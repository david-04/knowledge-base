
<div id='nodeSection1'>Activation route guards</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts41>{</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; path&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : </span><span class=rvts42>"admin"</span><span class=rvts41>,</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; component&nbsp; : </span><span class=rvts110>AdminComponent</span><span class=rvts41>,</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; canActivate: [</span><span class=rvts110>MyAuthGuard</span><span class=rvts41>],&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// protect this route by the given route guard</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; children&nbsp;&nbsp; : [{</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; path&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : </span><span class=rvts42>""</span><span class=rvts41>,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// a component-less route makes it easier to protect all children</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; canActivateChild: [</span><span class=rvts110>MyAuthGuard</span><span class=rvts41>],&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// protect all child routes by the given route guard</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; children&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : [</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { path&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : </span><span class=rvts42>"users"</span><span class=rvts41>, </span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; component : </span><span class=rvts110>UserComponent</span><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { path&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : </span><span class=rvts42>""</span><span class=rvts41>, </span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; component : </span><span class=rvts110>DashboardComponent </span><span class=rvts41>}</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; ]}</span></p>
<p><span class=rvts41>}</span></p>
<p><span class=rvts8><br></span></p>
<p class=rvps11><span class=rvts111><br></span></p>
<p><span class=rvts111><br></span></p>
<p><span class=rvts8><br></span></p>
<p><span class=rvts45>import</span><span class=rvts41> { Injectable } </span></p>
<p><span class=rvts45>from</span><span class=rvts41> </span><span class=rvts42>"@angular/core"</span><span class=rvts41>;</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts45>import</span><span class=rvts41> { Router, RouterStateSnapshot,</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ActivatedRouteSnapshot } </span></p>
<p><span class=rvts45>from</span><span class=rvts41> </span><span class=rvts42>"@angular/router"</span><span class=rvts41>;</span></p>
<p><span class=rvts45><br></span></p>
<p><span class=rvts45>import</span><span class=rvts41> { CanActivateChild, </span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CanActivate, ... } </span></p>
<p><span class=rvts45>from</span><span class=rvts41> </span><span class=rvts42>"@angular/router"</span><span class=rvts41>;</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts41>@Injectable()</span></p>
<p><span class=rvts45>export</span><span class=rvts41> </span><span class=rvts45>class</span><span class=rvts41> </span><span class=rvts110>MyAuthGuard</span><span class=rvts41> </span></p>
<p><span class=rvts45>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; implements</span><span class=rvts41> </span><span class=rvts110>CanActivate</span><span class=rvts60>,</span><span class=rvts41> </span><span class=rvts110>CanActivateChild </span><span class=rvts41>{</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; </span><span class=rvts45>constructor</span><span class=rvts41>(</span><span class=rvts45>private</span><span class=rvts41> router: </span><span class=rvts110>Router</span><span class=rvts41>) { }</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; canActivate(route: </span><span class=rvts110>ActivatedRouteSnapshot</span><span class=rvts41>,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// this method is called when navigating to a route</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; state: </span><span class=rvts110>RouterStateSnapshot</span><span class=rvts41>) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// can return a boolean or a promise/observable that resolves to a boolean</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts45>let</span><span class=rvts41> url: </span><span class=rvts45>string</span><span class=rvts41> = state.url;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// contains the requested (new) URL</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts45>if</span><span class=rvts41> (</span><span class=rvts45>this</span><span class=rvts41>.authService.isLoggedIn) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// delegate authentication to a service</span></p>
<p><span class=rvts45>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return</span><span class=rvts41> </span><span class=rvts45>true</span><span class=rvts41>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// if the user is already logged in: allow the route</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts45>this</span><span class=rvts41>.authService.redirectUrl = url;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// store the target URL for a redirect after a login</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts45>this</span><span class=rvts41>.router.navigate([</span><span class=rvts42>"/login"</span><span class=rvts41>]);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// redirect to the login page</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts45>return</span><span class=rvts41> </span><span class=rvts45>false</span><span class=rvts41>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// don't allow the originally requested route</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; }</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; canActivateChild(route: </span><span class=rvts110>ActivatedRouteSnapshot</span><span class=rvts41>, </span><span class=rvts39>// this method is called when navigating to a route</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; state: </span><span class=rvts110>RouterStateSnapshot</span><span class=rvts41>) {&nbsp; </span><span class=rvts39>// can return a boolean or a promise/observable that resolves to a boolean</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// ...</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; }</span></p>
<p><span class=rvts41>}</span></p>
<p><span class=rvts45><br></span></p>
<p><span class=rvts110><br></span></p>
<div id='nodeSection2'>Deactivation route guards</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts41>{</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; path&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : </span><span class=rvts42>"edit"</span><span class=rvts41>,</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; component&nbsp;&nbsp;&nbsp; : </span><span class=rvts110>EditComponent</span><span class=rvts41>,</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; canDeactivate: [</span><span class=rvts110>CanDeactivateGuard</span><span class=rvts41>]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// attacht the deactivate guard to the corresponding route</span></p>
<p><span class=rvts41>}</span></p>
<p><span class=rvts41><br></span></p>
<p class=rvps11><span class=rvts111><br></span></p>
<p><span class=rvts111><br></span></p>
<p><span class=rvts12><br></span></p>
<p><span class=rvts45>import</span><span class=rvts41> { Injectable&nbsp;&nbsp;&nbsp; } </span><span class=rvts45>from</span><span class=rvts41> </span><span class=rvts42>"@angular/core"</span><span class=rvts41>;</span></p>
<p><span class=rvts45>import</span><span class=rvts41> { CanDeactivate } </span><span class=rvts45>from</span><span class=rvts41> </span><span class=rvts42>"@angular/router"</span><span class=rvts41>;</span></p>
<p><span class=rvts45>import</span><span class=rvts41> { Observable&nbsp;&nbsp;&nbsp; } </span><span class=rvts45>from</span><span class=rvts41> </span><span class=rvts42>"rxjs/Observable"</span><span class=rvts41>;</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts45>export</span><span class=rvts41> </span><span class=rvts45>interface</span><span class=rvts41> </span><span class=rvts110>ICanDeactivate</span><span class=rvts41> {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// use a delcarative interface to be type-safe</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; canDeactivate: () =&gt; </span><span class=rvts110>Observable</span><span class=rvts41>&lt;</span><span class=rvts45>boolean</span><span class=rvts41>&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// implement this interface in all components that need control</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | </span><span class=rvts110>Promise</span><span class=rvts41>&lt;</span><span class=rvts45>boolean</span><span class=rvts41>&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// their own disposal (the canDeactivate function could ask the user</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | </span><span class=rvts45>boolean</span><span class=rvts41>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// if the changes should be saved)</span></p>
<p><span class=rvts41>}</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts41>@Injectable()</span></p>
<p><span class=rvts45>export</span><span class=rvts41> </span><span class=rvts45>class</span><span class=rvts41> </span><span class=rvts110>CanDeactivateGuard</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts45>implements</span><span class=rvts41> </span><span class=rvts110>CanDeactivate</span><span class=rvts41>&lt;</span><span class=rvts110>ICanDeactivate</span><span class=rvts41>&gt; {</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; canDeactivate(component: </span><span class=rvts110>ICanDeactivate</span><span class=rvts41>) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// canDeactivate receives the current component instance</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts45>return</span><span class=rvts41> component.canDeactivate&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// and can delegate the decition making if applicable</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ? component.canDeactivate()</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : </span><span class=rvts45>true</span><span class=rvts41>;</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; }</span></p>
<p><span class=rvts41>}</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts110><br></span></p>
<div id='nodeSection3'>Resolver route guards (preload)</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts41>{</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; path&nbsp;&nbsp;&nbsp;&nbsp; : </span><span class=rvts42>"person/:id"</span><span class=rvts41>,</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; component: </span><span class=rvts110>PersonDetailComponent</span><span class=rvts41>,</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; resolve&nbsp; : { person: </span><span class=rvts110>PersonResolver</span><span class=rvts41> }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// add resolvers for all data that needs to be initially loaded</span></p>
<p><span class=rvts41>}</span></p>
<p><span class=rvts41><br></span></p>
<p class=rvps11><span class=rvts111><br></span></p>
<p><span class=rvts111><br></span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts45>import</span><span class=rvts41> { Injectable&nbsp;&nbsp; } </span><span class=rvts45>from</span><span class=rvts41> </span><span class=rvts42>"@angular/core"</span><span class=rvts41>;</span></p>
<p><span class=rvts45>import</span><span class=rvts41> { Router,</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ActivatedRouteSnapshot,</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RouterStateSnapshot,</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Resolve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </span><span class=rvts45>from</span><span class=rvts41> </span><span class=rvts42>"@angular/router"</span><span class=rvts41>;</span></p>
<p><span class=rvts45>import</span><span class=rvts41> { Person&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </span><span class=rvts45>from</span><span class=rvts41> </span><span class=rvts42>"./data-model"</span><span class=rvts41>;</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts41>@Injectable()</span></p>
<p><span class=rvts45>export</span><span class=rvts41> </span><span class=rvts45>class</span><span class=rvts41> </span><span class=rvts110>PersonResolver</span><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// this is a service (must be registered as provider of the module)</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts45>implements</span><span class=rvts41> </span><span class=rvts110>Resolve</span><span class=rvts41>&lt;</span><span class=rvts110>Person</span><span class=rvts41>&gt; {</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; </span><span class=rvts45>constructor</span><span class=rvts41>(</span><span class=rvts45>private</span><span class=rvts41> router: </span><span class=rvts110>Router</span><span class=rvts41>) { }</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; resolve(route: </span><span class=rvts110>ActivatedRouteSnapshot</span><span class=rvts41>,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// this service is called before a route is activated</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; state: </span><span class=rvts110>RouterStateSnapshot</span><span class=rvts41>):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// the route is shown only when the function returns</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts110>Promise</span><span class=rvts41>&lt;</span><span class=rvts110>Person</span><span class=rvts41>&gt; {</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts45>return</span><span class=rvts41> </span><span class=rvts45>this</span><span class=rvts41>.myRestService&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// do data loading like otherwise done in the component's ngOnInit method</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .getPerson(+route.params[</span><span class=rvts42>"id"</span><span class=rvts41>])&nbsp; </span><span class=rvts39>// access the route parameters to select the correct data</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .then((person: </span><span class=rvts110>Person</span><span class=rvts41>) =&gt; {&nbsp;&nbsp;&nbsp; </span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts45>if</span><span class=rvts41> (person) </span><span class=rvts45>return</span><span class=rvts41> person;&nbsp;&nbsp; </span><span class=rvts39>// return data if it was found</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts45>this</span><span class=rvts41>.router&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// ... and otherwise redirect to a more general page (listing or the likes)</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .navigate([</span><span class=rvts42>"/home"</span><span class=rvts41>]);</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts45>return</span><span class=rvts41> </span><span class=rvts45>null</span><span class=rvts41>;</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; }</span></p>
<p><span class=rvts41>}</span></p>
<p><span class=rvts41><br></span></p>
<p class=rvps11><span class=rvts111><br></span></p>
<p><span class=rvts111><br></span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts41>ngOnInit() {</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; </span><span class=rvts45>this</span><span class=rvts41>.route.data.subscribe(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// in ngOnInit retrieve the already pre-fetched data</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (data: { person: </span><span class=rvts110>Person</span><span class=rvts41> }) =&gt; {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// from the route</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts45>this</span><span class=rvts41>.person = data.person;</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; );</span></p>
<p><span class=rvts41>}</span></p>
<p><span class=rvts41><br></span></p>
<p><br></p>
<p><br></p>

