
<div id='nodeSection1'>Visibility</div>
<p><span class=rvts58><br></span></p>
<p><span class=rvts58>Public</span><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' visible everywhere</span></p>
<p><span class=rvts58>Private</span><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' only visible in the class itself (not applicable to non-nested classes)</span></p>
<p><span class=rvts58>Protected</span><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' like private but also visible in derived classes (not applicable to classes)</span></p>
<p><span class=rvts58>Friend&nbsp;&nbsp;</span><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' public in the current assembly but private outside</span></p>
<p><span class=rvts58>Protected</span><span class=rvts183> </span><span class=rvts58>Friend</span><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' protected in the current assembly but private outside</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts315><br></span></p>
<div id='nodeSection2'>Constants</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts58>Const</span><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' must be initialised where declared (can also replace the Dim keyword)</span></p>
<p><span class=rvts58>ReadOnly</span><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' can be initialised in constructor</span></p>
<p><span class=rvts58>WriteOnly&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' can only be assigned but not evaluated</span></p>
<p><span class=rvts176><br></span></p>
<p><span class=rvts176><br></span></p>
<div id='nodeSection3'>Overloading</div>
<p><span class=rvts58><br></span></p>
<p><span class=rvts58>Overridable</span><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' method may be overridden by derived classes (like virtual in C#)</span></p>
<p><span class=rvts58>Overrides</span><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' method replaces the parent's implementation</span></p>
<p><span class=rvts58>NotOverridable Overrides</span><span class=rvts183> </span><span class=rvts176>' prohibit further overriding by descendant classes</span></p>
<p><span class=rvts58>Shadows&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' used for properties, but can be replaced by Overloads as well (unless it's a Shared member)</span></p>
<p><span class=rvts58>Overloads</span><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' shadow same-named members of the base class</span></p>
<p><span class=rvts176><br></span></p>
<p><span class=rvts176><br></span></p>
<div id='nodeSection4'>Other</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts58>Shared</span><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' the VB equaivalent of static (not applicable to classes, use Module instead)</span></p>
<p><span class=rvts58>Partial</span><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' class is spread accross multiple source files</span></p>
<p><span class=rvts58>MustInherit</span><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' like abstract in C#, applicable to classes</span></p>
<p><span class=rvts58>MustOverride</span><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' like abstract in C#, applicable to members</span></p>
<p><span class=rvts58>NotInheritable</span><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' prohibit inheritance (used for utility classes)</span></p>
<p><span class=rvts176><br></span></p>
<p><br></p>
<p><br></p>

