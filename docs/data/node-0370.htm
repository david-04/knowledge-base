
<div id='nodeSection1'>Array functions</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts41>length = </span><span class=rvts45>asort</span><span class=rvts41>(srcArray, [resultArray], [sortOrder])&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39># sort the values or indices of srcArray according to sortOrder (e.g. "@ind_str_asc") and store</span></p>
<p><span class=rvts41>length = </span><span class=rvts45>asorti</span><span class=rvts41>(srcArray, [resultArray], [sortOrder])&nbsp;&nbsp;&nbsp; </span><span class=rvts39># the result inresultArray[1...length] (if provided) or (otherwise) overwrite srcArray</span></p>
<p><span class=rvts39><br></span></p>
<p><span class=rvts41>length = </span><span class=rvts45>length</span><span class=rvts41>(array)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39># return the number of elements in the array</span></p>
<p><span class=rvts12><br></span></p>
<p><span class=rvts45>PROCINFO</span><span class=rvts41>[</span><span class=rvts42>"sorted_in"</span><span class=rvts41>] = </span><span class=rvts42>"@unsorted"</span><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39># </span><span class=rvts44>for-in-loops</span><span class=rvts39>: traverse arrays randomly</span></p>
<p><span class=rvts45>PROCINFO</span><span class=rvts41>[</span><span class=rvts42>"sorted_in"</span><span class=rvts41>] = </span><span class=rvts42>"@ind_{str|num}_{asc|desc}"</span><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39># key comparison as string or number</span></p>
<p><span class=rvts45>PROCINFO</span><span class=rvts41>[</span><span class=rvts42>"sorted_in"</span><span class=rvts41>] = </span><span class=rvts42>"@val_{str|num|type}_{asc|desc}"</span><span class=rvts41> </span><span class=rvts39># value comparison as string, number or type (number&gt;string&gt;subarray)</span></p>
<p><span class=rvts45>PROCINFO</span><span class=rvts41>[</span><span class=rvts42>"sorted_in"</span><span class=rvts41>] = </span><span class=rvts42>"myFunction"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39># use a custom sort function: myFunction(idx1,val1,idx2,val2) =&gt; return -1/0/1</span></p>
<p><span class=rvts12><br></span></p>
<p><span class=rvts12><br></span></p>
<div id='nodeSection2'>Onedimensional arrays</div>
<p><span class=rvts41><br></span></p>
<p><span class=rvts45>SUBSEP</span><span class=rvts41> = </span><span class=rvts42>"\034"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39># character used to concatenate multiple index values</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts41>array[variable]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39># array["5"]</span></p>
<p><span class=rvts41>array[variable, </span><span class=rvts42>"a"</span><span class=rvts41>]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39># array["5" SUBSEP "a"] == array["5\034a"]</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts45>delete</span><span class=rvts41> array&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39># delete the whole array (recursively)</span></p>
<p><span class=rvts45>delete</span><span class=rvts41> array[variable]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39># delete the given element (might be a whole sub-array)</span></p>
<p><span class=rvts45>delete</span><span class=rvts41> array[variable, </span><span class=rvts42>"a"</span><span class=rvts41>]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39># delete the given element (might be a whole sub-array)</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts45>if </span><span class=rvts41>(variable </span><span class=rvts45>in</span><span class=rvts41> array)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39># check if a given index exists</span></p>
<p><span class=rvts45>if </span><span class=rvts41>((variable, </span><span class=rvts42>"a"</span><span class=rvts41>) </span><span class=rvts45>in</span><span class=rvts41> array)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39># check if a compound index exist (variable SUBSEP "a" in array)</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts45>isarray</span><span class=rvts41>(array)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39># check if this variable is an array</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts45>for</span><span class=rvts41> (idx </span><span class=rvts45>in</span><span class=rvts41> array)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39># for-in reaches every single index (simple or compound)</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; print array[idx]</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts41><br></span></p>
<div id='nodeSection3'>Multidimensional arrays</div>
<p><span class=rvts41><br></span></p>
<p><span class=rvts41>array[variable][</span><span class=rvts42>"a"</span><span class=rvts41>]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39># indexes are bracketed separately</span></p>
<p><span class=rvts45><br></span></p>
<p><span class=rvts45>isarray</span><span class=rvts41>(array[variable])&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39># check if an array element is itself an array</span></p>
<p><span class=rvts45>isarray</span><span class=rvts41>(array[variable][</span><span class=rvts42>"a"]</span><span class=rvts41>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39># subarrays are checked in the same way</span></p>
<p><span class=rvts45><br></span></p>
<p><span class=rvts45>if </span><span class=rvts41>(variable </span><span class=rvts45>in</span><span class=rvts41> array)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39># only the first dimension can be checked</span></p>
<p><span class=rvts45>if </span><span class=rvts41>(</span><span class=rvts42>"a"</span><span class=rvts41> </span><span class=rvts45>in</span><span class=rvts41> array[variable])&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39># sub-arrays can be treated as arrays on their own</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts45>delete</span><span class=rvts41> array&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39># delete the whole array (recursively)</span></p>
<p><span class=rvts45>delete</span><span class=rvts41> array[variable]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39># delete the whole sub-array (recursively)</span></p>
<p><span class=rvts45>delete</span><span class=rvts41> array[variable][</span><span class=rvts42>"a"</span><span class=rvts41>]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39># delete a single element</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts45>for</span><span class=rvts41> (idx1 </span><span class=rvts45>in</span><span class=rvts41> array)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39># idx1 only considers the first index</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; for (idx2 </span><span class=rvts45>in</span><span class=rvts41> array[idx1])&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39># the second index has to be iterated separately</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print array[idx1][idx2]</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts12><br></span></p>
<p><br></p>
<p><br></p>

