
<div id='nodeSection1'>Defining modules</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts45>var</span><span class=rvts41> count = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// modules run in their own context, all objects are local</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts45>function</span><span class=rvts41> sayHello() {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// define functions, classes, variables</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; console.log(</span><span class=rvts42>'Hello world!'</span><span class=rvts41>);</span></p>
<p><span class=rvts41>}</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts45>function</span><span class=rvts41> Person(name, age) {</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; </span><span class=rvts45>this</span><span class=rvts41>.name = name;</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; </span><span class=rvts45>this</span><span class=rvts41>.age = age;</span></p>
<p><span class=rvts41>}</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts41>Person.prototype.toString = </span><span class=rvts45>function</span><span class=rvts41> () {</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; </span><span class=rvts45>return</span><span class=rvts41> </span><span class=rvts45>this</span><span class=rvts41>.name + </span><span class=rvts42>' ('</span><span class=rvts41> + </span><span class=rvts45>this</span><span class=rvts41>.age + </span><span class=rvts42>')'</span><span class=rvts41>;</span></p>
<p><span class=rvts41>};</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts45>if</span><span class=rvts41> (</span><span class=rvts45>require</span><span class=rvts41>.main === </span><span class=rvts45>module</span><span class=rvts41>) { }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// is true if the .js file was started as the main program (not included via require())</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts45>module</span><span class=rvts41>.exports.sayHello = sayHello;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// export selected objects as public API</span></p>
<p><span class=rvts45>module</span><span class=rvts41>.exports.Person&nbsp;&nbsp; = Person;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// classes are exported through their constructor</span></p>
<p><span class=rvts45>module</span><span class=rvts41>.exports.pi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Math.PI;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// exposed variables can be changed by the client</span></p>
<p><span class=rvts39><br></span></p>
<p><span class=rvts12><br></span></p>
<div id='nodeSection2'>Loading and using modules</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts45>var</span><span class=rvts41> </span><span class=rvts43>module</span><span class=rvts41> = </span><span class=rvts45>require</span><span class=rvts41>(</span><span class=rvts42>'http'</span><span class=rvts41>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// </span><span class=rvts44>core module</span></p>
<p><span class=rvts39><br></span></p>
<p><span class=rvts45>var</span><span class=rvts41> </span><span class=rvts43>module</span><span class=rvts41> = </span><span class=rvts45>require</span><span class=rvts41>(</span><span class=rvts42>'/home/david/my_module'</span><span class=rvts41>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// </span><span class=rvts44>file module</span><span class=rvts39> (the file extension .js can be omitted)</span></p>
<p><span class=rvts45>var</span><span class=rvts41> </span><span class=rvts43>module</span><span class=rvts41> = </span><span class=rvts45>require</span><span class=rvts41>(</span><span class=rvts42>'./lib/my_module.js'</span><span class=rvts41>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// the path can be relative as well</span></p>
<p><span class=rvts39><br></span></p>
<p><span class=rvts45>var</span><span class=rvts41> </span><span class=rvts43>module</span><span class=rvts41> = </span><span class=rvts45>require</span><span class=rvts41>(</span><span class=rvts42>'./MyPackageFolder'</span><span class=rvts41>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// </span><span class=rvts44>folder module</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// 1. if a package.json exists in the folder, then it loads the </span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>//&nbsp;&nbsp;&nbsp; the file specified by its 'main' property</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// 2. if no package.json exists in the folder, index.js is loaded</span></p>
<p><span class=rvts39><br></span></p>
<p><span class=rvts45>var</span><span class=rvts41> </span><span class=rvts43>module</span><span class=rvts41> = </span><span class=rvts45>require</span><span class=rvts41>(</span><span class=rvts42>'myPackage.js'</span><span class=rvts41>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// </span><span class=rvts44>modules folder</span></p>
<p><span class=rvts39>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 1. node_modules/myPackage.js</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// 2. ../node_modules/myPackage.js</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// 3. ../../node_modules/myPackage.js</span></p>
<p><span class=rvts39><br></span></p>
<p><span class=rvts43>module</span><span class=rvts41>.sayHello();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// the exported functions can be called</span></p>
<p><span class=rvts45>var</span><span class=rvts41> person = </span><span class=rvts45>new</span><span class=rvts41> </span><span class=rvts43>module</span><span class=rvts41>.Person(</span><span class=rvts42>'David'</span><span class=rvts41>, 37);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// the exported classes can be instantiated</span></p>
<p><span class=rvts41>console.log(person.toString());</span></p>
<p><span class=rvts41><br></span></p>
<p><br></p>
<p><br></p>

