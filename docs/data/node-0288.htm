
<div id='nodeSection1'>General syntax</div>
<p><span class=rvts8><br></span></p>
<p><span class=rvts58>int</span><span class=rvts183>[] numbers = { 1, 17, 2, 28, 9, 16, 3 };&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// data source</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts58>var</span><span class=rvts183> result =&nbsp;&nbsp;&nbsp; </span><span class=rvts58>from</span><span class=rvts183> n </span><span class=rvts58>in</span><span class=rvts183> numbers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// returns a result set of type IEnumerable(Of SomeClass)</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts58>where</span><span class=rvts183> n &lt; 15 || 20 &lt; n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// filter criteria</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts58>orderby</span><span class=rvts183> n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// sort order</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts58>select</span><span class=rvts183> </span><span class=rvts58>new</span><span class=rvts183> </span><span class=rvts110>MyClass</span><span class=rvts183>(n);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// can construct new objects for the result set</span></p>
<p><span class=rvts176><br></span></p>
<p><span class=rvts176><br></span></p>
<p><span class=rvts58>from</span><span class=rvts183> n </span><span class=rvts58>in</span><span class=rvts183> numbers </span><span class=rvts58>select</span><span class=rvts183> </span><span class=rvts58>new</span><span class=rvts183> { Previous = n - 1, Current = n }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// aliasing fields requires instanciating an anonymous class</span></p>
<p><span class=rvts176><br></span></p>
<p><span class=rvts58>from</span><span class=rvts183> n </span><span class=rvts58>in</span><span class=rvts183> numbers </span><span class=rvts58>let</span><span class=rvts183> tmp = </span><span class=rvts184>"000"</span><span class=rvts183> + n </span><span class=rvts58>select</span><span class=rvts183> tmp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// local temporary variables</span></p>
<p><span class=rvts176><br></span></p>
<p><span class=rvts195>from s in strings where s like "*.exe" select s</span><span class=rvts196>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the LIKE keyword is not supported in C# (use Contains() instead)</span></p>
<p><span class=rvts196><br></span></p>
<p><span class=rvts195>aggregate n in numbers into Sum(n), Max(n)</span><span class=rvts196>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // aggregation is not supported in C#</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection2'>Common operations</div>
<p><span class=rvts58><br></span></p>
<p><span class=rvts58>&nbsp; from</span><span class=rvts183> c </span><span class=rvts58>in</span><span class=rvts183> customers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// </span><span class=rvts187>subselect</span></p>
<p><span class=rvts58> where</span><span class=rvts183> (</span><span class=rvts58>from</span><span class=rvts183> o </span><span class=rvts58>in</span><span class=rvts183> orders </span><span class=rvts58>select</span><span class=rvts183> o.CustomerId).Contains(c.CustomerId)</span></p>
<p><span class=rvts58>select</span><span class=rvts183> c</span></p>
<p><span class=rvts58><br></span></p>
<p><span class=rvts58>&nbsp; from</span><span class=rvts183> o </span><span class=rvts58>in</span><span class=rvts183> orders&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// </span><span class=rvts187>group by attribute</span></p>
<p><span class=rvts58> group</span><span class=rvts183> o </span><span class=rvts58>by</span><span class=rvts183> o.CustomerId </span><span class=rvts58>into</span><span class=rvts183> tmp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// all orders with the same CustomerId are copied to one tmp table</span></p>
<p><span class=rvts58>select</span><span class=rvts183> </span><span class=rvts58>new</span><span class=rvts183> { CustomerId = tmp.Min().CustomerId,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// tmp contains only data for one CustomerId</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OrderCount = tmp.Count(),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// aggregate functions can be invoked upon the tmp table</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ListOfOrders = tmp }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// all orders for this CustomerId can be returned as a list</span></p>
<p><span class=rvts58><br></span></p>
<p><span class=rvts58>&nbsp; from</span><span class=rvts183> o </span><span class=rvts58>in</span><span class=rvts183> orders&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// </span><span class=rvts187>group by expression</span></p>
<p><span class=rvts58> group</span><span class=rvts183> o </span><span class=rvts58>by</span><span class=rvts183> (o.OrderId % 2 == 1) </span><span class=rvts58>into</span><span class=rvts183> tmp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// the group criterion is a calculated expression</span></p>
<p><span class=rvts58>select</span><span class=rvts183> </span><span class=rvts58>new</span><span class=rvts183> { IsOdd = tmp.Key, ListOfOrders = tmp }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// the calculated group-by expression is stored as Key property</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
<p><span class=rvts58>&nbsp; from</span><span class=rvts183> c </span><span class=rvts58>in</span><span class=rvts183> customers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// </span><span class=rvts187>cartesian product</span></p>
<p><span class=rvts58>&nbsp; from</span><span class=rvts183> o </span><span class=rvts58>in</span><span class=rvts183> orders</span></p>
<p><span class=rvts58> where</span><span class=rvts183> c.CustomerId == o.CustomerId&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// filters can be applied like in SQL joins</span></p>
<p><span class=rvts58>select</span><span class=rvts183> </span><span class=rvts58>new</span><span class=rvts183> { Customer = c, Order = o };&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// data can be selected from all source tables</span></p>
<p><span class=rvts176><br></span></p>
<p><span class=rvts183>&nbsp; </span><span class=rvts58>from</span><span class=rvts183> c </span><span class=rvts58>in</span><span class=rvts183> customers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// </span><span class=rvts187>inner join</span></p>
<p><span class=rvts58>&nbsp; join</span><span class=rvts183> o </span><span class=rvts58>in</span><span class=rvts183> orders </span><span class=rvts58>on</span><span class=rvts183> c.CustomerId </span><span class=rvts58>equals</span><span class=rvts183> o.CustomerId</span></p>
<p><span class=rvts58>select</span><span class=rvts183> </span><span class=rvts58>new</span><span class=rvts183> { Customer = c, Order = o };</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts58>&nbsp; from</span><span class=rvts183> c </span><span class=rvts58>in</span><span class=rvts183> customers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// </span><span class=rvts187>outer join with grouping</span></p>
<p><span class=rvts183>&nbsp; </span><span class=rvts58>join</span><span class=rvts183> o </span><span class=rvts58>in</span><span class=rvts183> orders </span><span class=rvts58>on</span><span class=rvts183> c.CustomerId </span><span class=rvts58>equals</span><span class=rvts183> o.CustomerId </span><span class=rvts58>into</span><span class=rvts183> tmp</span></p>
<p><span class=rvts58>select</span><span class=rvts183> </span><span class=rvts58>new</span><span class=rvts183> { Customer = c, ListOfOrders = tmp }</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts58>&nbsp; from</span><span class=rvts183> c </span><span class=rvts58>in</span><span class=rvts183> customers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// </span><span class=rvts187>outer join without grouping</span></p>
<p><span class=rvts58>&nbsp; join</span><span class=rvts183> o </span><span class=rvts58>in</span><span class=rvts183> orders </span><span class=rvts58>on</span><span class=rvts183> c.CustomerId </span><span class=rvts58>equals</span><span class=rvts183> o.CustomerId </span><span class=rvts58>into</span><span class=rvts183> tmp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// group related records in a temporary table</span></p>
<p><span class=rvts58>&nbsp; from</span><span class=rvts183> o </span><span class=rvts58>in</span><span class=rvts183> tmp.DefaultIfEmpty()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// join against the temporary table</span></p>
<p><span class=rvts58>select</span><span class=rvts183> </span><span class=rvts58>new</span><span class=rvts183> { Customer = c, Order = o }</span></p>
<p><span class=rvts58><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection3'>Result set operations</div>
<p><span class=rvts8><br></span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.All&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// do all items satisfy the lambda condition?</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Any&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// is there any item satisfying the lambda condition?</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Single&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// return one item matching the criteria (throws an exception if there are none or more than one)</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.SingleOrDefault&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// same as above but returns a default if no item matches</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.First&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// return the first item matching the criteria (throws an exception if there is none)</span><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.FirstOrDefault&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// same as above but returns a default if no item matches</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Last&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// return the last item matching the criteria (throws an exception if there is none)</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.LastOrDefault&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// same as above but returns a default if no item matches</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Skip&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// skip a given number of records</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Take&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// never select more than the given number of records</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.SkipWhile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// skip records while a given condition is met</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.TakeWhile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// select records only as long as a given condition is met</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Where</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.OrderBy</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Distinct</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Reverse</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Concat</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Except</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Intersect</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Union</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Average&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// pass in a lambda expression (e.g. products.Sum(p =&gt; p.Price))</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Count</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Min</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Max</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Sum</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.ToArray&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// convert to a typed array</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.ToList&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// ... or list</span></p>
<p><span class=rvts58><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection4'>Runing parallel queries</div>
<p><span class=rvts58><br></span></p>
<p><span class=rvts110>CancellationTokenSource</span><span class=rvts183> canceller&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// optionally create a cancellation request channel</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; = </span><span class=rvts58>new</span><span class=rvts183> </span><span class=rvts110>CancellationTokenSource</span><span class=rvts183>();</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts58>var</span><span class=rvts183> result = </span><span class=rvts58>from</span><span class=rvts183> n </span></p>
<p><span class=rvts58>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; in</span><span class=rvts183> numbers.AsParallel()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// run the query in parallel</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .WithCancellation(canceller.Token)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// pass a cancellation token</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts58>select</span><span class=rvts183> n; </span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts58>var</span><span class=rvts183> result = </span><span class=rvts58>from</span><span class=rvts183> n </span><span class=rvts58>in</span><span class=rvts183> numbers.AsParallel().AsOrdered() </span><span class=rvts58>select</span><span class=rvts183> n;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// same as above but tasks are ordered sequentially (i.e. sorted)</span><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts183>canceller.Cancel();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// cancel the LINQ from another thread</span></p>
<p class=rvps2><span class=rvts176><br></span></p>
<p><br></p>
<p>Test data:</p>
<p><span class=rvts58>public</span><span class=rvts183> </span><span class=rvts58>class</span><span class=rvts183> </span><span class=rvts110>Customer</span><span class=rvts183> : </span><span class=rvts110>IComparable</span><span class=rvts183>&lt;</span><span class=rvts110>Customer</span><span class=rvts183>&gt;</span></p>
<p><span class=rvts183>{</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>public</span><span class=rvts183> </span><span class=rvts58>int</span><span class=rvts183> CustomerId { </span><span class=rvts58>get</span><span class=rvts183>; </span><span class=rvts58>set</span><span class=rvts183>; }</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>public</span><span class=rvts183> </span><span class=rvts58>string</span><span class=rvts183> Name { </span><span class=rvts58>get</span><span class=rvts183>; </span><span class=rvts58>set</span><span class=rvts183>; }</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>public</span><span class=rvts183> </span><span class=rvts110>List</span><span class=rvts183>&lt;</span><span class=rvts110>Order</span><span class=rvts183>&gt; Orders { </span><span class=rvts58>get</span><span class=rvts183>; </span><span class=rvts58>set</span><span class=rvts183>; } = </span><span class=rvts58>new</span><span class=rvts183> </span><span class=rvts110>List</span><span class=rvts183>&lt;</span><span class=rvts110>Order</span><span class=rvts183>&gt;();</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>public</span><span class=rvts183> </span><span class=rvts58>static</span><span class=rvts183> </span><span class=rvts110>List</span><span class=rvts183>&lt;</span><span class=rvts110>Order</span><span class=rvts183>&gt; AllOrders { </span><span class=rvts58>get</span><span class=rvts183>; </span><span class=rvts58>set</span><span class=rvts183>; } = </span><span class=rvts58>new</span><span class=rvts183> </span><span class=rvts110>List</span><span class=rvts183>&lt;</span><span class=rvts110>Order</span><span class=rvts183>&gt;();</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>public</span><span class=rvts183> Customer(</span><span class=rvts58>int</span><span class=rvts183> customerId, </span><span class=rvts58>string</span><span class=rvts183> name)</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; {</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts58>this</span><span class=rvts183>.CustomerId = customerId;</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts58>this</span><span class=rvts183>.Name = name;</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; }</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>public</span><span class=rvts183> </span><span class=rvts58>void</span><span class=rvts183> AddOrder(</span><span class=rvts58>int</span><span class=rvts183> orderId, </span><span class=rvts58>string</span><span class=rvts183> comment)</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; {</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts110>Order</span><span class=rvts183> order = </span><span class=rvts58>new</span><span class=rvts183> </span><span class=rvts110>Order</span><span class=rvts183>()</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OrderId = orderId,</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CustomerId = </span><span class=rvts58>this</span><span class=rvts183>.CustomerId,</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Comment = comment</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts58>this</span><span class=rvts183>.Orders.Add(order);</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts110>Customer</span><span class=rvts183>.AllOrders.Add(order);</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; }</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>public</span><span class=rvts183> </span><span class=rvts58>int</span><span class=rvts183> CompareTo(</span><span class=rvts110>Customer</span><span class=rvts183> other)</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; {</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts58>return</span><span class=rvts183> </span><span class=rvts58>this</span><span class=rvts183>.CustomerId - other.CustomerId;</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; }</span></p>
<p><span class=rvts183>}</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts58>public</span><span class=rvts183> </span><span class=rvts58>class</span><span class=rvts183> </span><span class=rvts110>Order</span><span class=rvts183> : </span><span class=rvts110>IComparable</span><span class=rvts183>&lt;</span><span class=rvts110>Order</span><span class=rvts183>&gt;</span></p>
<p><span class=rvts183>{</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>public</span><span class=rvts183> </span><span class=rvts58>int</span><span class=rvts183> OrderId { </span><span class=rvts58>get</span><span class=rvts183>; </span><span class=rvts58>set</span><span class=rvts183>; }</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>public</span><span class=rvts183> </span><span class=rvts58>int</span><span class=rvts183> CustomerId { </span><span class=rvts58>get</span><span class=rvts183>; </span><span class=rvts58>set</span><span class=rvts183>; }</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>public</span><span class=rvts183> </span><span class=rvts58>string</span><span class=rvts183> Comment { </span><span class=rvts58>get</span><span class=rvts183>; </span><span class=rvts58>set</span><span class=rvts183>; }</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>public</span><span class=rvts183> </span><span class=rvts58>int</span><span class=rvts183> CompareTo(</span><span class=rvts110>Order</span><span class=rvts183> other)</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; {</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts58>return</span><span class=rvts183> </span><span class=rvts58>this</span><span class=rvts183>.OrderId - other.OrderId;</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; }</span></p>
<p><span class=rvts183>}</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts110>Customer</span><span class=rvts183> cust = </span><span class=rvts58>null</span><span class=rvts183>;</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts58>int</span><span class=rvts183>[] numbers = { 1, 17, 2, 28, 9, 16, 3 };</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts58>string</span><span class=rvts183>[] strings = { </span><span class=rvts184>"abc"</span><span class=rvts183>, </span><span class=rvts184>"test.exe"</span><span class=rvts183>, </span><span class=rvts184>"123"</span><span class=rvts183> };</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts110>List</span><span class=rvts183>&lt;</span><span class=rvts110>Customer</span><span class=rvts183>&gt; customers = </span><span class=rvts58>new</span><span class=rvts183> </span><span class=rvts110>List</span><span class=rvts183>&lt;</span><span class=rvts110>Customer</span><span class=rvts183>&gt;();</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts110>List</span><span class=rvts183>&lt;</span><span class=rvts110>Order</span><span class=rvts183>&gt; orders = </span><span class=rvts110>Customer</span><span class=rvts183>.AllOrders;</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cust = </span><span class=rvts58>new</span><span class=rvts183> </span><span class=rvts110>Customer</span><span class=rvts183>(1, </span><span class=rvts184>"David"</span><span class=rvts183>);</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cust.AddOrder(1, </span><span class=rvts184>"David's order 1"</span><span class=rvts183>);</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cust.AddOrder(2, </span><span class=rvts184>"David's order 1"</span><span class=rvts183>);</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; customers.Add(cust);</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cust = </span><span class=rvts58>new</span><span class=rvts183> </span><span class=rvts110>Customer</span><span class=rvts183>(2, </span><span class=rvts184>"Patrick"</span><span class=rvts183>);</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cust.AddOrder(3, </span><span class=rvts184>"Patricks's order 1"</span><span class=rvts183>);</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; customers.Add(cust);</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cust = </span><span class=rvts58>new</span><span class=rvts183> </span><span class=rvts110>Customer</span><span class=rvts183>(3, </span><span class=rvts184>"Winfried"</span><span class=rvts183>);</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; customers.Add(cust);</span></p>
<p><br></p>
<p><br></p>

