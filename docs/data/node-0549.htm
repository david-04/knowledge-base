
<div id='nodeSection1'>Arrays</div>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts262>array = []                                  </span><span class=rvts263># empty array</span></p>
<p class=rvps12><span class=rvts262>array = [1, 2, 3, 4]                        </span><span class=rvts263># hard-coded array</span></p>
<p class=rvps12><span class=rvts262>array = </span><span class=rvts266>%w{ a e i o u }</span><span class=rvts262>                     </span><span class=rvts263># equivalent to ["a", "e", "i", "o", "u"]</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts262>array.length                                </span><span class=rvts263># size of the array</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts262>array[0] = </span><span class=rvts266>"value"</span><span class=rvts262>                          </span><span class=rvts263># assign a value</span></p>
<p class=rvps12><span class=rvts262>array[1..3] = [</span><span class=rvts266>"a"</span><span class=rvts262>, </span><span class=rvts266>"b"</span><span class=rvts262>, </span><span class=rvts266>"c"</span><span class=rvts262>]               </span><span class=rvts263># assign multiple array elements</span></p>
<p class=rvps12><span class=rvts262>x, y = [</span><span class=rvts266>"a"</span><span class=rvts262>, </span><span class=rvts266>"b"</span><span class=rvts262>]              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    </span><span class=rvts263># decompose an array</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts262>array[0]                                    </span><span class=rvts263># access a value</span></p>
<p class=rvps12><span class=rvts262>array[999999] == </span><span class=rvts265>nil</span><span class=rvts262>                        </span><span class=rvts263># out-of-bounds elements are nil</span></p>
<p class=rvps12><span class=rvts263><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection2'>Stack and queue</div>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts262>array &lt;&lt; </span><span class=rvts266>"abc"</span><span class=rvts262>                              </span><span class=rvts263># append at the end - short for x.push()</span></p>
<p class=rvps12><span class=rvts262>array.push(</span><span class=rvts266>"abc"</span><span class=rvts262>)</span></p>
<p class=rvps12><span class=rvts262>array.pop                                   </span><span class=rvts263># remove (and return) the last element</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts262>array.unshift(</span><span class=rvts266>"abc"</span><span class=rvts262>)                        </span><span class=rvts263># insert at the beginning of the array</span></p>
<p class=rvps12><span class=rvts262>array.shift                                 </span><span class=rvts263># remove (and return) the first element</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection3'>Array operations</div>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts262>[1, 2] + [</span><span class=rvts266>"abc"</span><span class=rvts262>, </span><span class=rvts266>"xyz"</span><span class=rvts262>]             &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263># concatenate arrays</span></p>
<p class=rvps12><span class=rvts262>[1, 2, 3, 3, 4, 4] - [1, 3]                 </span><span class=rvts263># removes all "1" and "3", returns [2, 4, 4]</span></p>
<p class=rvps12><span class=rvts264><br></span></p>
<p class=rvps12><span class=rvts262>array.empty?                                </span><span class=rvts263># check if array is empty</span></p>
<p class=rvps12><span class=rvts262>array.include?(2)                           </span><span class=rvts263># check if array contains the given element</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts262>array.collect { |x| x * 2 }                 </span><span class=rvts263># map operation</span></p>
<p class=rvps12><span class=rvts262>array.each { |x| </span><span class=rvts265>puts</span><span class=rvts262> x }                   </span><span class=rvts263># iterate over all elements and perform an action</span></p>
<p class=rvps12><span class=rvts262>array.each_with_index { |x, i| ... }        </span><span class=rvts263># provides the index as the second parameter</span></p>
<p class=rvps12><span class=rvts262>array.</span><span class=rvts271>select</span><span class=rvts262> { |x| 0 == x % 2 }             </span><span class=rvts263># filter</span></p>
<p class=rvps12><span class=rvts262>array.sort_by { |x| x.id }                  </span><span class=rvts263># code block retrieves the field/value to sort by</span></p>
<p class=rvps12><span class=rvts262>array.reverse</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts262>array.first                                 </span><span class=rvts263># get the first element</span></p>
<p class=rvps12><span class=rvts262>array.first(2)                              </span><span class=rvts263># get the first two elements as a new array</span></p>
<p class=rvps12><span class=rvts262>array.last                                  </span><span class=rvts263># get the last element</span></p>
<p class=rvps12><span class=rvts262>array.last(2)                               </span><span class=rvts263># get the last two elements as a new array</span></p>
<p class=rvps12><span class=rvts262>array.take(5)                               </span><span class=rvts263># create a new array with the first 5</span></p>
<p class=rvps12><span class=rvts262>array.drop(5)                               </span><span class=rvts263># create a new array excluding the first 5</span></p>
<p class=rvps12><span class=rvts262>array.slice(10, 5)                          </span><span class=rvts263># extract a sub-array from the middle (10..15)</span></p>
<p class=rvps12><span class=rvts262>array[10..15]                     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263># create an array with the 2nd and 3rd element</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts262>array.join()                                </span><span class=rvts263># joins without whitespace, nil values are rendered as empty strings</span></p>
<p class=rvps12><span class=rvts262>array.join(</span><span class=rvts266>", "</span><span class=rvts262>)</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection4'>Hashes</div>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts262>hash = { }                                  </span><span class=rvts263># empty hash</span></p>
<p class=rvps12><span class=rvts262>hash = { cat: </span><span class=rvts266>"Katze"</span><span class=rvts262>, eel: </span><span class=rvts266>"Aal"</span><span class=rvts262> }         </span><span class=rvts263># JSON notation (preferred), keys are symbols</span></p>
<p class=rvps12><span class=rvts262>hash = { </span><span class=rvts266>"cat"</span><span class=rvts262> =&gt; </span><span class=rvts266>"Katze"</span><span class=rvts262>, </span><span class=rvts266>"eel"</span><span class=rvts262> =&gt; </span><span class=rvts266>"Aal"</span><span class=rvts262> } </span><span class=rvts263># legacy notation with strings (discouraged)</span></p>
<p class=rvps12><span class=rvts262>hash = { :cat =&gt; </span><span class=rvts266>"Katze"</span><span class=rvts262>, :eel =&gt; </span><span class=rvts266>"Aal"</span><span class=rvts262> }   </span><span class=rvts263># legacy notation with symbols (discouraged)</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts262>hash.size                                   </span><span class=rvts263># count elements</span></p>
<p class=rvps12><span class=rvts262>hash.keys                                   </span><span class=rvts263># returns an array with keys</span></p>
<p class=rvps12><span class=rvts262>hash.values                                 </span><span class=rvts263># returns an array with values</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts262>hash[:cat]                                  </span><span class=rvts263># get a value (returns nil if undefined)</span></p>
<p class=rvps12><span class=rvts262>hash[:snake] = </span><span class=rvts266>"Schlange"</span><span class=rvts262>                   </span><span class=rvts263># add an entry</span></p>
<p class=rvps12><span class=rvts262>hash.delete(:snake)                         </span><span class=rvts263># delete a key (does nothing if the key does not exist)</span></p>
<p class=rvps12><span class=rvts262>hash.delete_if { |key, value| ... }         </span><span class=rvts263># delete all entries matching the given condition</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts262>hash.each { |key, value| ... }              </span><span class=rvts263># perform an action for each entry</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p><br></p>
<p><br></p>

