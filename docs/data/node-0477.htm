
<div id='nodeSection1'>Accessing properties</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts41>person.name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// access an instance property</span></p>
<p><span class=rvts41>person[</span><span class=rvts42>"name"</span><span class=rvts41>]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// same as above, alternative syntax</span></p>
<p><span class=rvts41>Person.prototype.instanceCount&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// access static (shared) properties</span></p>
<p><span class=rvts41>person.instanceCount&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// note: the instance might shadow the prototype's property with its own version</span></p>
<p><span class=rvts39><br></span></p>
<p><span class=rvts45>if</span><span class=rvts41> (</span><span class=rvts42>"name"</span><span class=rvts41> </span><span class=rvts45>in</span><span class=rvts41> person)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// check if an object contains a property</span></p>
<p><span class=rvts45>if</span><span class=rvts41> (person </span><span class=rvts45>instanceof</span><span class=rvts41> Person)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// check if an object is of a given type</span></p>
<p><span class=rvts45>if</span><span class=rvts41> (Person.prototype.isPrototypeOf(person))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// same as above, different syntax</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts45>delete</span><span class=rvts41> person1.name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// remove a property (i.e. set it to undefined)</span></p>
<p><span class=rvts8><br></span></p>
<p><span class=rvts45>if</span><span class=rvts41> (person </span><span class=rvts45>instanceof</span><span class=rvts41> Person)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// check if an object is of a given type</span></p>
<p><span class=rvts45>if</span><span class=rvts41> (Person.prototype.isPrototypeOf(person))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// same as above, different syntax</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection2'>Standard methods</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts41>object.propertyIsEnumerable(</span><span class=rvts42>"propertyName"</span><span class=rvts41>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// does the property show up in for-in loop</span></p>
<p><span class=rvts41>object.toString()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// return a string representation</span></p>
<p><span class=rvts41>object.toLocaleString()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// in most cases identical to toString()</span></p>
<p><span class=rvts41>object.valueOf()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// convert an object into a primitive (value) type</span></p>
<p><span class=rvts41>object.hasOwnProperty(</span><span class=rvts42>"propertyName"</span><span class=rvts41>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// property defined in the instance (and not only in the prototype)</span></p>
<p><span class=rvts41>Object.keys(myObjectInstance)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// ECMAScript 5: list of all enumerable instance (not prototype) properties</span></p>
<p><span class=rvts8><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection3'>Iterating through properties</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts45>for</span><span class=rvts41> (</span><span class=rvts45>var</span><span class=rvts41> propertyName </span><span class=rvts45>in</span><span class=rvts41> window) { }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// iterate over all properties of the object</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts45>var</span><span class=rvts41> person = { name: </span><span class=rvts42>"David"</span><span class=rvts41>, age: 37 };</span></p>
<p><span class=rvts45>var</span><span class=rvts41> iterator = </span><span class=rvts45>new</span><span class=rvts41> Iterator(person);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// </span><span class=rvts44>ECMAScript 6</span><span class=rvts39>: the iterator can loop over object properties or array elements</span></p>
<p><span class=rvts45>try</span><span class=rvts41> {</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; </span><span class=rvts45>while</span><span class=rvts41>(</span><span class=rvts45>true</span><span class=rvts41>) {</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts45>var</span><span class=rvts41> item = iterator.next();</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts45>var</span><span class=rvts41> key = item[0];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// the iterator returns an array of keys and values (for arrays the key is the index)</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts45>var</span><span class=rvts41> value = item[1];</span></p>
<p><span class=rvts41>}</span></p>
<p><span class=rvts41>} </span><span class=rvts45>catch</span><span class=rvts41>(ex){ }</span></p>
<p><span class=rvts41><br></span></p>
<p><br></p>
<p><br></p>

