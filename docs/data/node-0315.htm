
<div id='nodeSection1'>Custom delegates</div>
<p><span class=rvts8><br></span></p>
<p><span class=rvts58>public</span><span class=rvts183> </span><span class=rvts58>delegate</span><span class=rvts183> </span><span class=rvts58>void</span><span class=rvts183> </span><span class=rvts110>MyDelegate</span><span class=rvts183>(</span><span class=rvts58>string</span><span class=rvts183> message);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// defined like a class, can be generic and/or have a return value</span></p>
<p><span class=rvts58><br></span></p>
<p><span class=rvts58>public</span><span class=rvts183> </span><span class=rvts58>void</span><span class=rvts183> myMethod(</span><span class=rvts110>MyDelegate</span><span class=rvts183> myDelegate)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// delegate is passed like a regular parameter</span></p>
<p><span class=rvts183>{</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; myDelegate(</span><span class=rvts184>"Hello world!"</span><span class=rvts183>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// invoke the delegate</span></p>
<p><span class=rvts183>}</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts58>public</span><span class=rvts183> </span><span class=rvts58>void</span><span class=rvts183> callbackMethod(</span><span class=rvts58>string</span><span class=rvts183> message)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// sample implementation matching the MyDelegate signature</span></p>
<p><span class=rvts183>{</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts110>Console</span><span class=rvts183>.WriteLine(message);</span></p>
<p><span class=rvts183>}</span></p>
<p><span class=rvts58><br></span></p>
<p><span class=rvts58>this</span><span class=rvts183>.myMethod(</span><span class=rvts58>this</span><span class=rvts183>.callbackMethod);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// call a method and pass another one as the delegate parameter</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection2'>Predefined delegates</div>
<p><span class=rvts8><br></span></p>
<p><span class=rvts110>Action</span><span class=rvts183>&lt;</span><span class=rvts58>int</span><span class=rvts183>, </span><span class=rvts58>string, ...</span><span class=rvts183>&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// predefined: void OnEvent(int, string, ...)</span></p>
<p><span class=rvts110>Func</span><span class=rvts183>&lt;</span><span class=rvts58>string</span><span class=rvts183>, ..., </span><span class=rvts58>int</span><span class=rvts183>&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// predefined: int OnEvent(string, ...), last type is the return value</span></p>
<p><span class=rvts58><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection3'>Event handlers</div>
<p><span class=rvts8><br></span></p>
<p><span class=rvts58>public</span><span class=rvts183> </span><span class=rvts58>event</span><span class=rvts183> </span><span class=rvts110>Action</span><span class=rvts183>&lt;</span><span class=rvts58>string</span><span class=rvts183>&gt; OnEvent;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// define the delegate as a property of the class</span></p>
<p><span class=rvts58><br></span></p>
<p><span class=rvts58>this</span><span class=rvts183>.OnEvent += </span><span class=rvts58>this</span><span class=rvts183>.myCallbackMethod;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// attach as many delegates as required</span></p>
<p><span class=rvts58><br></span></p>
<p><span class=rvts58>this</span><span class=rvts183>.OnEvent?.Invoke(</span><span class=rvts184>"Hello world!"</span><span class=rvts183>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// invoke all delegates that have been registered</span></p>
<p><span class=rvts110><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection4'>Lambda expressions</div>
<p><span class=rvts8><br></span></p>
<p><span class=rvts110>Func</span><span class=rvts183>&lt;</span><span class=rvts58>int</span><span class=rvts183>, </span><span class=rvts58>int</span><span class=rvts183>&gt; f1 = MyFunction;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// point to an existing function</span></p>
<p><span class=rvts110>Func</span><span class=rvts183>&lt;</span><span class=rvts58>int</span><span class=rvts183>, </span><span class=rvts58>int</span><span class=rvts183>&gt; f2 = (x) =&gt; x * x;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// inline lambda expression</span></p>
<p><span class=rvts110>Func</span><span class=rvts183>&lt;</span><span class=rvts58>int</span><span class=rvts183>, </span><span class=rvts58>int</span><span class=rvts183>&gt; f3 = (x) =&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// multiline lambda expression</span></p>
<p><span class=rvts183>{</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>return</span><span class=rvts183> x * x;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
<p><span class=rvts183>};</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts110>Console</span><span class=rvts183>.WriteLine(f2(7));</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection5'>Delegate design pattern</div>
<p><span class=rvts8><br></span></p>
<p><span class=rvts58>public</span><span class=rvts183> </span><span class=rvts58>class</span><span class=rvts183> </span><span class=rvts110>ParserErrorArgs</span><span class=rvts183> : </span><span class=rvts110>EventArgs</span><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// define a custom event data class</span></p>
<p><span class=rvts183>{</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>public</span><span class=rvts183> </span><span class=rvts58>readonly</span><span class=rvts183> </span><span class=rvts58>int</span><span class=rvts183> line;</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>public</span><span class=rvts183> </span><span class=rvts58>readonly</span><span class=rvts183> </span><span class=rvts58>string</span><span class=rvts183> message;</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>public</span><span class=rvts183> ParserErrorArgs(</span><span class=rvts58>int</span><span class=rvts183> line, </span><span class=rvts58>string</span><span class=rvts183> message)</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; {</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts58>this</span><span class=rvts183>.line = line; </span><span class=rvts58>this</span><span class=rvts183>.message = message;</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; }</span></p>
<p><span class=rvts183>}</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts58>class</span><span class=rvts183> </span><span class=rvts110>Parser</span></p>
<p><span class=rvts183>{</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>public</span><span class=rvts183> </span><span class=rvts58>event</span><span class=rvts183> </span><span class=rvts110>EventHandler</span><span class=rvts183>&lt;</span><span class=rvts110>ParserErrorArgs</span><span class=rvts183>&gt; OnError;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// use the default generic delegate EventHandler</span></p>
<p><span class=rvts176><br></span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>public</span><span class=rvts183> </span><span class=rvts58>void</span><span class=rvts183> Parse()</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; {</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OnError?.Invoke(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// only invoke when a delegate is registered</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts58>this</span><span class=rvts183>,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// pass the current object instance as first parameter</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts58>new</span><span class=rvts183> </span><span class=rvts110>ParserErrorArgs</span><span class=rvts183>(10, </span><span class=rvts184>"Invalid character"</span><span class=rvts183>)&nbsp;&nbsp;&nbsp; </span><span class=rvts176>// combine all payload data in an EventsArgs object</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; }</span></p>
<p><span class=rvts183>}</span></p>
<p><span class=rvts183><br></span></p>
<p><br></p>
<p><br></p>

