
<div id='nodeSection1'>Groovy</div>
<p><span class=rvts8><br></span></p>
<ul class=list2>
<li class=rvps10 style="margin-left: 0px; text-indent: 0px"><span class=rvts8>enhancement of the Java language with additional simplified syntax constructs</span></li>
<li class=rvps10 style="margin-left: 0px; text-indent: 0px"><span class=rvts8>semicolons are optional</span></li>
<li class=rvps10 style="margin-left: 0px; text-indent: 0px"><span class=rvts8>everything is optional by default</span></li>
<li class=rvps10 style="margin-left: 0px; text-indent: 0px"><span class=rvts8>getters and setters are generted automatically</span></li>
<li class=rvps10 style="margin-left: 0px; text-indent: 0px"><span class=rvts8>accessing properties directly passes through the getters/setters in the background</span></li>
</ul>
<p><span class=rvts8><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection2'>Examples</div>
<p><span class=rvts8><br></span></p>
<p class=rvps12><span class=rvts138>String </span><span class=rvts124>name = </span><span class=rvts128>'David'</span></p>
<p class=rvps12><span class=rvts325>def </span><span class=rvts124>name2 = </span><span class=rvts128>'David'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts125>// variable types can be inferred automatically (applies to functions as well)</span></p>
<p class=rvps12><span class=rvts125><br></span></p>
<p class=rvps12><span class=rvts124>println </span><span class=rvts128>"Hello </span><span class=rvts124>$name</span><span class=rvts128>"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts125>// double-quoted strings allow for variable expansion</span></p>
<p class=rvps12><span class=rvts125><br></span></p>
<p class=rvps12><span class=rvts325>def </span><span class=rvts124>names = [</span><span class=rvts128>"Celine"</span><span class=rvts124>, </span><span class=rvts128>"Sarah"</span><span class=rvts124>]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts125>// creates an ArrayList behind the scenes</span></p>
<p class=rvps12><span class=rvts124>names.sort()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts125>// ... that can for example be sorted</span></p>
<p class=rvps12><span class=rvts124>names += </span><span class=rvts128>'Lorreena'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts125>// ... and elements can be added/removed</span></p>
<p class=rvps12><span class=rvts124>names -= </span><span class=rvts128>'Lorreena'</span></p>
<p class=rvps12><span class=rvts325>for </span><span class=rvts124>(name </span><span class=rvts325>in </span><span class=rvts124>names) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts125>// iterate over arrays</span></p>
<p class=rvps12><span class=rvts125>&nbsp;&nbsp;&nbsp; </span><span class=rvts124>println name</span></p>
<p class=rvps12><span class=rvts124>}</span></p>
<p class=rvps12><span class=rvts124><br></span></p>
<p class=rvps12><span class=rvts325>def </span><span class=rvts124>closure = {x -&gt; println x}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts125>// define a closure</span></p>
<p class=rvps12><span class=rvts124>closure.call(</span><span class=rvts128>'Hello world!'</span><span class=rvts124>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts125>// invoke the closure</span></p>
<p class=rvps12><span class=rvts124>myArray.each(closure)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts125>// invoke the closure for each array element</span></p>
<p class=rvps12><span class=rvts124>names.each {x-&gt; myFunction(x)}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts125>// same as above but control the passing of parameters</span></p>
<p class=rvps12><span class=rvts124>names.each {myFunction(it)}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts125>// the first parameter is implicitly named "it"</span></p>
<p class=rvps12><span class=rvts125><br></span></p>
<p><br></p>
<p><br></p>

