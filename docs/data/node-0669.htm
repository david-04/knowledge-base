
<div id='nodeSection1'>Generic classes</div>
<p><span class=rvts9><br></span></p>
<p><span class=rvts58>Public</span><span class=rvts183> </span><span class=rvts58>Class</span><span class=rvts183> </span><span class=rvts110>Mapping</span><span class=rvts183>(</span><span class=rvts58>Of</span><span class=rvts183> </span><span class=rvts110>T1</span><span class=rvts183> </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts110>IComparable</span><span class=rvts183>,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' must implement Or be derived from</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts110>T2</span><span class=rvts183> </span><span class=rvts58>As</span><span class=rvts183> {</span><span class=rvts58>Class</span><span class=rvts183>, </span><span class=rvts58>New</span><span class=rvts183>})&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' must be a reference type (class not struct) and have default constructor</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>Public</span><span class=rvts183> </span><span class=rvts58>Property</span><span class=rvts183> key </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts110>T1</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>Public</span><span class=rvts183> </span><span class=rvts58>Property</span><span class=rvts183> value </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts110>T2</span></p>
<p><span class=rvts58>End</span><span class=rvts183> </span><span class=rvts58>Class</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts58>Dim</span><span class=rvts183> mapping </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts58>New</span><span class=rvts183> </span><span class=rvts110>Mapping</span><span class=rvts183>(</span><span class=rvts58>Of</span><span class=rvts183> </span><span class=rvts58>String</span><span class=rvts183>, </span><span class=rvts58>Integer</span><span class=rvts183>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' instantiate</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts9><br></span></p>
<div><table width="100%" border=1 cellpadding=1 cellspacing=-1 style="border-width: 0px; border-collapse: collapse;">
<tr valign=top>
<td width=1386 valign=top style="border-width : 1px; border-color: #000000; border-style: solid; background-color: #d2d2d2;"><div><table width="100%" border=0 cellpadding=0 cellspacing=0 style="border-width: 0px;">
<tr valign=top>
<td width="8%" valign=top><p class=rvps3><span class=rvts7>Generic methods</span></p>
</td>
<td width="50%" valign=top><p class=rvps4><span class=rvts129>vbtemplatefunctions vbtemplatemethods</span><span class=rvts40> vbgenericfunctions vbgenericmethods</span></p>
</td>
</tr>
</table>
</div>
</td>
</tr>
</table>
</div>
<p><span class=rvts183><br></span></p>
<p><span class=rvts58>Public</span><span class=rvts183> </span><span class=rvts58>Class</span><span class=rvts183> </span><span class=rvts110>Utility</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>Public</span><span class=rvts183> </span><span class=rvts58>Shared</span><span class=rvts183> </span><span class=rvts58>Sub</span><span class=rvts183> Swap(</span><span class=rvts58>Of</span><span class=rvts183> </span><span class=rvts110>T</span><span class=rvts183>)(</span><span class=rvts58>ByRef</span><span class=rvts183> x1 </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts110>T</span><span class=rvts183>, </span><span class=rvts58>ByRef</span><span class=rvts183> x2 </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts110>T</span><span class=rvts183>)&nbsp; </span><span class=rvts176>' only the method Is generic</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts58>Dim</span><span class=rvts183> temp </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts110>T</span><span class=rvts183> = x1</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x1 = x2</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x2 = temp</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>End</span><span class=rvts183> </span><span class=rvts58>Sub</span></p>
<p><span class=rvts58>End</span><span class=rvts183> </span><span class=rvts58>Class</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts110>Utility</span><span class=rvts183>.Swap(</span><span class=rvts58>Of</span><span class=rvts183> </span><span class=rvts58>String</span><span class=rvts183>)(string1, string2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' explicitely state the type or ...</span></p>
<p><span class=rvts110>Utility</span><span class=rvts183>.Swap(string1, string2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' the type is derived from the parameters</span></p>
<p><span class=rvts176><br></span></p>
<p><br></p>
<p><br></p>

