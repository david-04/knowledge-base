
<div id='nodeSection1'>Defining structures</div>
<p><span class=rvts8><br></span></p>
<p><span class=rvts41>[</span><span class=rvts171>StructLayout</span><span class=rvts41>(</span><span class=rvts171>LayoutKind</span><span class=rvts41>.Auto)]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// fields and properties are aligned/reordered for best performance</span></p>
<p><span class=rvts45>public</span><span class=rvts41> </span><span class=rvts45>struct</span><span class=rvts41> </span><span class=rvts171>MyDate</span><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// a structure is the value-type equivalent of a class</span></p>
<p><span class=rvts41>{</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; </span><span class=rvts45>public</span><span class=rvts41> </span><span class=rvts45>int</span><span class=rvts41> Day { </span><span class=rvts45>get</span><span class=rvts41>; </span><span class=rvts45>set</span><span class=rvts41>; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// it contains fields (or automatic properties)</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; </span><span class=rvts45>public</span><span class=rvts41> </span><span class=rvts45>int</span><span class=rvts41> Month { </span><span class=rvts45>get</span><span class=rvts41>; </span><span class=rvts45>set</span><span class=rvts41>; }</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; </span><span class=rvts45>public</span><span class=rvts41> </span><span class=rvts45>int</span><span class=rvts41> Year { </span><span class=rvts45>get</span><span class=rvts41>; </span><span class=rvts45>set</span><span class=rvts41>; }</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; </span><span class=rvts45>public</span><span class=rvts41> MyDate(</span><span class=rvts45>int</span><span class=rvts41> day, </span><span class=rvts45>int</span><span class=rvts41> month, </span><span class=rvts45>int</span><span class=rvts41> year)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// must have parameters, the default constructor can't be overloaded</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; {</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts45>this</span><span class=rvts41>.Day = day;</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts45>this</span><span class=rvts41>.Month = month;</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts45>this</span><span class=rvts41>.Year = year;</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; }</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; </span><span class=rvts45>public</span><span class=rvts41> </span><span class=rvts45>override</span><span class=rvts41> </span><span class=rvts45>string</span><span class=rvts41> ToString()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// it can implement subroutines and functions</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; {</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts45>return</span><span class=rvts41> </span><span class=rvts171>String</span><span class=rvts41>.Format(</span><span class=rvts42>$"</span><span class=rvts41>{Year}</span><span class=rvts42>/</span><span class=rvts41>{Month}</span><span class=rvts42>/</span><span class=rvts41>{Day}</span><span class=rvts42>"</span><span class=rvts41>);</span></p>
<p><span class=rvts41>&nbsp;&nbsp;&nbsp; }</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts41>}</span></p>
<p><span class=rvts58><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection2'>Using structures</div>
<p><span class=rvts8><br></span></p>
<p><span class=rvts171>MyDate</span><span class=rvts41> date1 = </span><span class=rvts45>new</span><span class=rvts41> </span><span class=rvts171>MyDate</span><span class=rvts41>(2015, 12, 24);</span></p>
<p><span class=rvts171>MyDate</span><span class=rvts41> date2 = </span><span class=rvts45>new</span><span class=rvts41> </span><span class=rvts171>MyDate</span><span class=rvts41>() { Year = 2015, Month = 12, Day = 24 };</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection3'>CLS compliance requirements</div>
<p><span class=rvts8><br></span></p>
<ul class=list2>
<li class=rvps10 style="margin-left: 0px; text-indent: 0px"><span class=rvts8>equality and inequality operators are overloaded</span></li>
<li class=rvps10 style="margin-left: 0px; text-indent: 0px"><span class=rvts8>Equals and GetHashCode must be overridden</span></li>
</ul>
<p><span class=rvts8><br></span></p>
<p><br></p>
<p><br></p>

