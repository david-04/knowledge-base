
<div id='nodeSection1'>General syntax</div>
<p><span class=rvts183><br></span></p>
<p><span class=rvts58>Dim</span><span class=rvts183> numbers </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts58>Integer</span><span class=rvts183>() = {1, 17, 2, 28, 9, 16, 3}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' data source</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts58>Dim</span><span class=rvts183> result =&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts58>From</span><span class=rvts183> n </span><span class=rvts58>In</span><span class=rvts183> numbers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' returns a result set of type IEnumerable(Of SomeClass)</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts58>Where</span><span class=rvts183> n &lt; 15 </span><span class=rvts58>Or</span><span class=rvts183> 20 &lt; n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' filter criteria</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts58>Order</span><span class=rvts183> </span><span class=rvts58>By</span><span class=rvts183> n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' sort order</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts58>Select</span><span class=rvts183> </span><span class=rvts58>New</span><span class=rvts183> </span><span class=rvts110>SomeClass</span><span class=rvts183>(n)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' can construct new objects for the result set</span></p>
<p><span class=rvts176><br></span></p>
<p><span class=rvts58>From</span><span class=rvts183> n </span><span class=rvts58>In</span><span class=rvts183> numbers </span><span class=rvts58>Select</span><span class=rvts183> Previous = n - 1, Number = n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' return as anonymous type with field names aliased</span></p>
<p><span class=rvts176><br></span></p>
<p><span class=rvts58>From</span><span class=rvts183> n </span><span class=rvts58>In</span><span class=rvts183> numbers </span><span class=rvts58>Let</span><span class=rvts183> tmp = </span><span class=rvts184>"000"</span><span class=rvts183> &amp; n </span><span class=rvts58>Select</span><span class=rvts183> tmp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' local temporary variables</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts58>From</span><span class=rvts183> s </span><span class=rvts58>In</span><span class=rvts183> strings </span><span class=rvts58>Where</span><span class=rvts183> s </span><span class=rvts58>Like</span><span class=rvts183> </span><span class=rvts184>"*.exe"</span><span class=rvts183> </span><span class=rvts58>Select</span><span class=rvts183> s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' pattern matching</span></p>
<p><span class=rvts176><br></span></p>
<p><span class=rvts58>Aggregate</span><span class=rvts183> n </span><span class=rvts58>In</span><span class=rvts183> numbers </span><span class=rvts58>Into</span><span class=rvts183> Sum(n), Max(n)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' aggregation (the result is a scalar, not an enumerable collection)</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection2'>Common operations</div>
<p><span class=rvts58><br></span></p>
<p><span class=rvts58>&nbsp; From</span><span class=rvts183> c </span><span class=rvts58>In</span><span class=rvts183> customers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' </span><span class=rvts187>subselect</span></p>
<p><span class=rvts58> Where</span><span class=rvts183> (</span><span class=rvts58>From</span><span class=rvts183> o </span><span class=rvts58>In</span><span class=rvts183> orders </span><span class=rvts58>Select</span><span class=rvts183> o.CustomerId).Contains(c.CustomerId) </span></p>
<p><span class=rvts58>Select</span><span class=rvts183> c</span></p>
<p><span class=rvts58><br></span></p>
<p><span class=rvts58>&nbsp; From</span><span class=rvts183> o </span><span class=rvts58>In</span><span class=rvts183> orders&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' </span><span class=rvts187>group by attribute</span></p>
<p><span class=rvts58> Group</span><span class=rvts183> o </span><span class=rvts58>By</span><span class=rvts183> o.CustomerId </span><span class=rvts58>Into</span><span class=rvts183> tmp = </span><span class=rvts58>Group</span><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' all orders with the same CustomerId are copied to one tmp table</span></p>
<p><span class=rvts58>Select</span><span class=rvts183> CustomerId&nbsp;&nbsp; = tmp.Min().CustomerId,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' tmp contains only data for one CustomerId</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OrderCount&nbsp;&nbsp; = tmp.Count(),</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ListOfOrders = tmp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' all orders for this CustomerId can be returned as a list</span></p>
<p><span class=rvts58><br></span></p>
<p><span class=rvts58>&nbsp; From</span><span class=rvts183> o </span><span class=rvts58>In</span><span class=rvts183> orders&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' </span><span class=rvts187>group by expression</span></p>
<p><span class=rvts58> Group</span><span class=rvts183> o </span><span class=rvts58>By</span><span class=rvts183> IsOdd = (o.OrderId </span><span class=rvts58>Mod</span><span class=rvts183> 2 = 1) </span><span class=rvts58>Into</span><span class=rvts183> tmp = </span><span class=rvts58>Group</span><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' a calculated expression can have an alias</span></p>
<p><span class=rvts58>Select</span><span class=rvts183> IsOdd = IsOdd, ListOfOrders = tmp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' the above alias is a selectable field</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
<p><span class=rvts58>&nbsp; From</span><span class=rvts183> c </span><span class=rvts58>In</span><span class=rvts183> customers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' </span><span class=rvts187>cartesian product</span></p>
<p><span class=rvts58>&nbsp; From</span><span class=rvts183> o </span><span class=rvts58>In</span><span class=rvts183> orders&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
<p><span class=rvts58> Where</span><span class=rvts183> c.CustomerId = o.CustomerId&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' filters can be applied like in SQL joins</span></p>
<p><span class=rvts58>Select</span><span class=rvts183> Customer = c, Order = o&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' data can be selected from all source tables</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts183>&nbsp; </span><span class=rvts58>From</span><span class=rvts183> c </span><span class=rvts58>In</span><span class=rvts183> customers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' </span><span class=rvts187>inner join</span></p>
<p><span class=rvts183>&nbsp; </span><span class=rvts58>Join</span><span class=rvts183> o </span><span class=rvts58>In</span><span class=rvts183> orders </span><span class=rvts58>On</span><span class=rvts183> c.CustomerId </span><span class=rvts58>Equals</span><span class=rvts183> o.CustomerId</span></p>
<p><span class=rvts58>Select</span><span class=rvts183> Customer = c, Order = o</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts58>&nbsp; From</span><span class=rvts183> c </span><span class=rvts58>In</span><span class=rvts183> customers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' </span><span class=rvts187>outer join with grouping</span></p>
<p><span class=rvts58> Group</span><span class=rvts183> </span><span class=rvts58>Join</span><span class=rvts183> o </span><span class=rvts58>In</span><span class=rvts183> orders </span><span class=rvts58>On</span><span class=rvts183> c.CustomerId </span><span class=rvts58>Equals</span><span class=rvts183> o.CustomerId </span><span class=rvts58>Into</span><span class=rvts183> tmp = </span><span class=rvts58>Group</span></p>
<p><span class=rvts58>Select</span><span class=rvts183> Customer = c, ListOfOrders = tmp</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts58>From</span><span class=rvts183> c </span><span class=rvts58>In</span><span class=rvts183> customers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' </span><span class=rvts187>outer join degrouped</span></p>
<p><span class=rvts58>Group</span><span class=rvts183> </span><span class=rvts58>Join</span><span class=rvts183> o </span><span class=rvts58>In</span><span class=rvts183> orders </span><span class=rvts58>On</span><span class=rvts183> c.CustomerId </span><span class=rvts58>Equals</span><span class=rvts183> o.CustomerId </span><span class=rvts58>Into</span><span class=rvts183> tmp = </span><span class=rvts58>Group</span><span class=rvts183>&nbsp; </span><span class=rvts176>' group related records in a temporary table</span></p>
<p><span class=rvts58>From</span><span class=rvts183> o </span><span class=rvts58>In</span><span class=rvts183> tmp.DefaultIfEmpty()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' join against the temporary table</span></p>
<p><span class=rvts58>Select</span><span class=rvts183> Customer = c, Order = o</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts183><br></span></p>
<div id='nodeSection3'>Result set operations</div>
<p><span class=rvts58><br></span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.All&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' do all items satisfy the lambda condition?</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Any&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' is there any item satisfying the lambda condition?</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Single&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' return one item matching the criteria (throws an exception if there are none or more than one)</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.SingleOrDefault&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' same as above but returns a default if no item matches</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.First&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' return the first item matching the criteria (throws an exception if there is none)</span><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.FirstOrDefault&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' same as above but returns a default if no item matches</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Last&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' return the last item matching the criteria (throws an exception if there is none)</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.LastOrDefault&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' same as above but returns a default if no item matches</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Skip&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' skip a given number of records</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Take&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' never select more than the given number of records</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.SkipWhile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' skip records while a given condition is met</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.TakeWhile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' select records only as long as a given condition is met</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Where</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.OrderBy</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Distinct</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Reverse</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Concat</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Except</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Intersect</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Union</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Average</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Count</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Min</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Max</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.Sum</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.ToArray&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' Convert to a typed array</span></p>
<p><span class=rvts183>System.Linq.</span><span class=rvts110>Enumerable</span><span class=rvts183>.ToList&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' ... or list</span></p>
<p><span class=rvts58><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection4'>Runing parallel queries</div>
<p><span class=rvts58><br></span></p>
<p><span class=rvts58>Dim</span><span class=rvts183> canceller </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts58>New</span><span class=rvts183> </span><span class=rvts110>CancellationTokenSource</span><span class=rvts183>()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' optionally create a cancellation request channel</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts58>Dim</span><span class=rvts183> Result =&nbsp;&nbsp; </span><span class=rvts58>From</span><span class=rvts183> n </span><span class=rvts58>In</span><span class=rvts183> numbers.AsParallel().&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' run the query in parallel</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WithCancellation(canceller.Token)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' pass a cancellation token</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts58>Select</span><span class=rvts183> n</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts58>Dim</span><span class=rvts183> result = </span><span class=rvts58>From</span><span class=rvts183> n </span><span class=rvts58>In</span><span class=rvts183> numbers.AsParallel().AsOrdered() </span><span class=rvts58>Select</span><span class=rvts183> n;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' same as above but tasks are ordered sequentially (i.e. sorted)</span><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts183>canceller.Cancel()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts176>' cancel the LINQ from another thread</span></p>
<p><span class=rvts176><br></span></p>
<p><br></p>
<p>Test data:</p>
<p><span class=rvts8><br></span></p>
<p><span class=rvts58>Public</span><span class=rvts183> </span><span class=rvts58>Class</span><span class=rvts183> </span><span class=rvts110>Customer</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>Implements</span><span class=rvts183> </span><span class=rvts110>IComparable</span><span class=rvts183>(</span><span class=rvts58>Of</span><span class=rvts183> </span><span class=rvts110>Customer</span><span class=rvts183>)</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>Public</span><span class=rvts183> </span><span class=rvts58>Property</span><span class=rvts183> CustomerId </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts58>Integer</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>Public</span><span class=rvts183> </span><span class=rvts58>Property</span><span class=rvts183> Name </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts58>String</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>Public</span><span class=rvts183> </span><span class=rvts58>Property</span><span class=rvts183> Orders </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts58>New</span><span class=rvts183> </span><span class=rvts110>List</span><span class=rvts183>(</span><span class=rvts58>Of</span><span class=rvts183> </span><span class=rvts110>Order</span><span class=rvts183>)</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>Public</span><span class=rvts183> </span><span class=rvts58>Shared</span><span class=rvts183> </span><span class=rvts58>Property</span><span class=rvts183> AllOrders </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts58>New</span><span class=rvts183> </span><span class=rvts110>List</span><span class=rvts183>(</span><span class=rvts58>Of</span><span class=rvts183> </span><span class=rvts110>Order</span><span class=rvts183>)</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>Public</span><span class=rvts183> </span><span class=rvts58>Sub</span><span class=rvts183> </span><span class=rvts58>New</span><span class=rvts183>(customerId </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts58>Integer</span><span class=rvts183>, name </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts58>String</span><span class=rvts183>)</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts58>Me</span><span class=rvts183>.CustomerId = customerId</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts58>Me</span><span class=rvts183>.Name = name</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>End</span><span class=rvts183> </span><span class=rvts58>Sub</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>Public</span><span class=rvts183> </span><span class=rvts58>Sub</span><span class=rvts183> AddOrder(orderId </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts58>Integer</span><span class=rvts183>, comment </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts58>String</span><span class=rvts183>)</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts58>Dim</span><span class=rvts183> order </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts58>New</span><span class=rvts183> </span><span class=rvts110>Order</span><span class=rvts183>() </span><span class=rvts58>With</span><span class=rvts183> {</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .OrderId = orderId,</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .CustomerId = </span><span class=rvts58>Me</span><span class=rvts183>.CustomerId,</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Comment = comment</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts58>Me</span><span class=rvts183>.Orders.Add(order)</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts110>Customer</span><span class=rvts183>.AllOrders.Add(order)</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>End</span><span class=rvts183> </span><span class=rvts58>Sub</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>Public</span><span class=rvts183> </span><span class=rvts58>Function</span><span class=rvts183> CompareTo(other </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts110>Customer</span><span class=rvts183>) </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts58>Integer</span><span class=rvts183> </span><span class=rvts58>Implements</span><span class=rvts183> </span><span class=rvts110>IComparable</span><span class=rvts183>(</span><span class=rvts58>Of</span><span class=rvts183> </span><span class=rvts110>Customer</span><span class=rvts183>).CompareTo</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts58>Return</span><span class=rvts183> </span><span class=rvts58>Me</span><span class=rvts183>.CustomerId - other.CustomerId</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>End</span><span class=rvts183> </span><span class=rvts58>Function</span></p>
<p><span class=rvts58>End</span><span class=rvts183> </span><span class=rvts58>Class</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts58>Public</span><span class=rvts183> </span><span class=rvts58>Class</span><span class=rvts183> </span><span class=rvts110>Order</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>Implements</span><span class=rvts183> </span><span class=rvts110>IComparable</span><span class=rvts183>(</span><span class=rvts58>Of</span><span class=rvts183> </span><span class=rvts110>Order</span><span class=rvts183>)</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>Public</span><span class=rvts183> </span><span class=rvts58>Property</span><span class=rvts183> OrderId </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts58>Integer</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>Public</span><span class=rvts183> </span><span class=rvts58>Property</span><span class=rvts183> CustomerId </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts58>Integer</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>Public</span><span class=rvts183> </span><span class=rvts58>Property</span><span class=rvts183> Comment </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts58>String</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>Public</span><span class=rvts183> </span><span class=rvts58>Function</span><span class=rvts183> CompareTo(other </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts110>Order</span><span class=rvts183>) </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts58>Integer</span><span class=rvts183> </span><span class=rvts58>Implements</span><span class=rvts183> </span><span class=rvts110>IComparable</span><span class=rvts183>(</span><span class=rvts58>Of</span><span class=rvts183> </span><span class=rvts110>Order</span><span class=rvts183>).CompareTo</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts58>Return</span><span class=rvts183> </span><span class=rvts58>Me</span><span class=rvts183>.OrderId - other.OrderId</span></p>
<p><span class=rvts183>&nbsp;&nbsp;&nbsp; </span><span class=rvts58>End</span><span class=rvts183> </span><span class=rvts58>Function</span></p>
<p><span class=rvts58>End</span><span class=rvts183> </span><span class=rvts58>Class</span></p>
<p><span class=rvts58><br></span></p>
<p><span class=rvts58><br></span></p>
<p><span class=rvts58><br></span></p>
<p><span class=rvts58><br></span></p>
<p><span class=rvts58>Dim</span><span class=rvts183> cust </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts110>Customer</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts58>Dim</span><span class=rvts183> numbers </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts58>Integer</span><span class=rvts183>() = {1, 17, 2, 28, 9, 16, 3}</span></p>
<p><span class=rvts58>Dim</span><span class=rvts183> strings </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts58>String</span><span class=rvts183>() = {</span><span class=rvts184>"abc"</span><span class=rvts183>, </span><span class=rvts184>"test.exe"</span><span class=rvts183>, </span><span class=rvts184>"123"</span><span class=rvts183>}</span></p>
<p><span class=rvts58>Dim</span><span class=rvts183> customers </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts58>New</span><span class=rvts183> </span><span class=rvts110>List</span><span class=rvts183>(</span><span class=rvts58>Of</span><span class=rvts183> </span><span class=rvts110>Customer</span><span class=rvts183>)</span></p>
<p><span class=rvts58>Dim</span><span class=rvts183> orders </span><span class=rvts58>As</span><span class=rvts183> </span><span class=rvts110>List</span><span class=rvts183>(</span><span class=rvts58>Of</span><span class=rvts183> </span><span class=rvts110>Order</span><span class=rvts183>) = </span><span class=rvts110>Customer</span><span class=rvts183>.AllOrders</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts183>cust = </span><span class=rvts58>New</span><span class=rvts183> </span><span class=rvts110>Customer</span><span class=rvts183>(1, </span><span class=rvts184>"David"</span><span class=rvts183>)</span></p>
<p><span class=rvts183>cust.AddOrder(1, </span><span class=rvts184>"David's order 1"</span><span class=rvts183>)</span></p>
<p><span class=rvts183>cust.AddOrder(2, </span><span class=rvts184>"David's order 1"</span><span class=rvts183>)</span></p>
<p><span class=rvts183>customers.Add(cust)</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts183>cust = </span><span class=rvts58>New</span><span class=rvts183> </span><span class=rvts110>Customer</span><span class=rvts183>(2, </span><span class=rvts184>"Patrick"</span><span class=rvts183>)</span></p>
<p><span class=rvts183>cust.AddOrder(3, </span><span class=rvts184>"Patricks's order 1"</span><span class=rvts183>)</span></p>
<p><span class=rvts183>customers.Add(cust)</span></p>
<p><span class=rvts183><br></span></p>
<p><span class=rvts183>cust = </span><span class=rvts58>New</span><span class=rvts183> </span><span class=rvts110>Customer</span><span class=rvts183>(3, </span><span class=rvts184>"Winfried"</span><span class=rvts183>)</span></p>
<p><span class=rvts183>customers.Add(cust)</span></p>
<p><br></p>
<p><br></p>

