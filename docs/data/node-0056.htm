
<div id='nodeSection1'>Stored procedures</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts64>CREATE</span><span class=rvts61> </span><span class=rvts64>PROCEDURE</span><span class=rvts63>/</span><span class=rvts64>PROC</span><span class=rvts61> my_procedure&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- procedure name starting with # =&gt; temporary (local), ## =&gt; temporary (global)</span></p>
<p><span class=rvts63>(</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp; @param1 </span><span class=rvts64>INT</span><span class=rvts61> </span><span class=rvts64>OUTPUT</span><span class=rvts63>,</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- output parameter</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp; @param2 </span><span class=rvts64>INT</span><span class=rvts61> </span><span class=rvts63>=</span><span class=rvts61> 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- paramter with a default value</span></p>
<p><span class=rvts63>)</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
<p><span class=rvts64>WITH</span><span class=rvts61> </span><span class=rvts63>{</span><span class=rvts64>RECOMPILE</span><span class=rvts63>|</span><span class=rvts64>ENCRYPTION</span><span class=rvts63>|</span><span class=rvts64>EXECUTE</span><span class=rvts61> </span><span class=rvts64>AS</span><span class=rvts61> </span><span class=rvts66>'user_name'</span><span class=rvts63>}</span><span class=rvts61>&nbsp; </span><span class=rvts62>-- recompile the procedure on each invokation / encrypt it internally so that no one can see it</span></p>
<p><span class=rvts64>AS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- procedures do not engange BEGIN-END blocks</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp; </span><span class=rvts64>PRINT</span><span class=rvts61> @param1</span><span class=rvts63>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- just place all statements one after another</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp; </span><span class=rvts64>PRINT</span><span class=rvts61> @param2</span><span class=rvts63>;</span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts64>ALTER</span><span class=rvts61> </span><span class=rvts64>PROCEDURE</span><span class=rvts61> my_procedure </span><span class=rvts63>...;</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- redefine a procedure</span></p>
<p><span class=rvts64>DROP</span><span class=rvts61> </span><span class=rvts64>PROCEDURE</span><span class=rvts61> my_procedure</span><span class=rvts63>;</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- delete a procedure</span></p>
<p><span class=rvts62><br></span></p>
<p><span class=rvts64>EXECUTE</span><span class=rvts61> my_procedure</span><span class=rvts64> </span><span class=rvts61>@p1 </span><span class=rvts64>OUTPUT</span><span class=rvts63>,</span><span class=rvts61> @p2</span><span class=rvts63>;</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- call the procedure and pass parameters (OUTPUT is optional)</span></p>
<p><span class=rvts64>EXECUTE</span><span class=rvts61> my_procedure</span><span class=rvts64> </span><span class=rvts61>@p1</span><span class=rvts63>,</span><span class=rvts61> </span><span class=rvts64>DEFAULT</span><span class=rvts63>;</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- leave out optional paramaters (DEFAULT can be omitted as well)</span></p>
<p><span class=rvts64>EXECUTE</span><span class=rvts61> my_procedure</span><span class=rvts64> </span><span class=rvts61>@param2</span><span class=rvts63>=</span><span class=rvts61>@p1</span><span class=rvts63>,</span><span class=rvts61>@param1</span><span class=rvts63>=</span><span class=rvts61>@p2</span><span class=rvts63>;</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- pass parameters in a named way (in any order)</span></p>
<p><span class=rvts64>EXECUTE</span><span class=rvts61> @result </span><span class=rvts63>=</span><span class=rvts61> my_procedure</span><span class=rvts64> </span><span class=rvts61>@p1</span><span class=rvts63>,</span><span class=rvts61> @p2</span><span class=rvts63>;</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- retrieve a return value</span></p>
<p><span class=rvts62><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection2'>Stored procedures as tables</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts64>CREATE</span><span class=rvts61> </span><span class=rvts64>PROCEDURE</span><span class=rvts61> get_data </span><span class=rvts64>AS</span><span class=rvts61> </span><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts63>*</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> tab</span><span class=rvts63>;</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- a stored procedure can also return (i.e. print) a SELECT's result</span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts64>EXECUTE</span><span class=rvts61> get_data</span><span class=rvts64> WITH</span><span class=rvts61> RESULT </span><span class=rvts64>SETS</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- the retrieved columns can be aliased and type-converted</span></p>
<p><span class=rvts63>(</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp; [Customer number] </span><span class=rvts64>INT</span><span class=rvts61> </span><span class=rvts63>NOT</span><span class=rvts61> </span><span class=rvts63>NULL,</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp; [Customer name]&nbsp;&nbsp; </span><span class=rvts64>CHAR</span><span class=rvts63>(</span><span class=rvts61>50</span><span class=rvts63>)</span><span class=rvts61> </span><span class=rvts63>NOT</span><span class=rvts61> </span><span class=rvts63>NULL</span></p>
<p><span class=rvts63>);</span></p>
<p><span class=rvts62><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection3'>Functions</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts64>CREATE</span><span class=rvts61> </span><span class=rvts64>FUNCTION</span><span class=rvts61> my_function</span><span class=rvts64> </span><span class=rvts63>(</span><span class=rvts61>@param </span><span class=rvts64>INT</span><span class=rvts61> </span><span class=rvts63>=</span><span class=rvts61> 0</span><span class=rvts63>)</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- create a function with optional parameters (and possibly default values)</span></p>
<p><span class=rvts64>RETURNS</span><span class=rvts61> </span><span class=rvts64>INT</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- declare the return type </span></p>
<p><span class=rvts64>WITH</span><span class=rvts61> </span><span class=rvts63>{</span><span class=rvts64>ENCRYPTION</span><span class=rvts63>|</span><span class=rvts64>SCHEMABINDING</span><span class=rvts63>}</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- SCHEMABINDING prevents referenced objects (like tables) from being modified</span></p>
<p><span class=rvts64>AS</span></p>
<p><span class=rvts64>BEGIN</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp; </span><span class=rvts64>SET</span><span class=rvts61> @param </span><span class=rvts63>=</span><span class=rvts61> @param </span><span class=rvts63>+</span><span class=rvts61> 1</span><span class=rvts63>;</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp; </span><span class=rvts64>RETURN</span><span class=rvts61> @param </span><span class=rvts63>+</span><span class=rvts61> 1</span><span class=rvts63>;</span></p>
<p><span class=rvts64>END</span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts64>ALTER</span><span class=rvts61> </span><span class=rvts64>FUNCTION</span><span class=rvts61> my_function </span><span class=rvts63>...;</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- redefine a function</span></p>
<p><span class=rvts64>DROP</span><span class=rvts61> </span><span class=rvts64>FUNCTION</span><span class=rvts61> my_function</span><span class=rvts63>;</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- delete a function</span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts64>PRINT</span><span class=rvts61> dbo</span><span class=rvts63>.</span><span class=rvts61>my_function</span><span class=rvts63>(</span><span class=rvts61>1</span><span class=rvts63>);</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- calling a function seems to require a preceding "dbo." before the function name</span></p>
<p><span class=rvts62><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection4'>Functions as tables</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts64>CREATE</span><span class=rvts61> </span><span class=rvts64>FUNCTION</span><span class=rvts61> my_function</span><span class=rvts63>()</span></p>
<p><span class=rvts64>RETURNS</span><span class=rvts61> </span><span class=rvts64>TABLE</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- the return type is declared as TABLE</span></p>
<p><span class=rvts64>AS</span><span class=rvts61> </span><span class=rvts64>RETURN</span><span class=rvts61> </span><span class=rvts64>SELECT</span><span class=rvts61> id</span><span class=rvts63>,</span><span class=rvts61> name </span><span class=rvts64>FROM</span><span class=rvts61> CUSTOMER </span><span class=rvts64>WHERE</span><span class=rvts61> id</span><span class=rvts63>&lt;</span><span class=rvts61>3</span><span class=rvts63>;</span><span class=rvts61> </span><span class=rvts62>-- the function body has no BEGIN-END block, but returns a SELECT</span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts63>*</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> dbo</span><span class=rvts63>.</span><span class=rvts61>my_function</span><span class=rvts63>();</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- a function call can be used just like a regular table</span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts63>*</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> customer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- for every single record in the customer table call the given function</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp; </span><span class=rvts63>CROSS</span><span class=rvts61> </span><span class=rvts63>APPLY</span><span class=rvts61> dbo</span><span class=rvts63>.</span><span class=rvts61>my_other_function</span><span class=rvts63>(</span><span class=rvts61>customer</span><span class=rvts63>.</span><span class=rvts61>id</span><span class=rvts63>);</span><span class=rvts61> </span><span class=rvts62>-- and create an inner join with whatever the table function returns</span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts63>*</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> customer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp; </span><span class=rvts63>OUTER</span><span class=rvts61> </span><span class=rvts63>APPLY</span><span class=rvts61> dbo</span><span class=rvts63>.</span><span class=rvts61>my_other_function</span><span class=rvts63>(</span><span class=rvts61>customer</span><span class=rvts63>.</span><span class=rvts61>id</span><span class=rvts63>);</span><span class=rvts61> </span><span class=rvts62>-- same as above but outer join</span></p>
<p><span class=rvts62><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection5'>Tables as input parameters</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts64>CREATE</span><span class=rvts61> </span><span class=rvts64>TYPE</span><span class=rvts61> table_type </span><span class=rvts64>AS</span><span class=rvts61> </span><span class=rvts64>TABLE </span><span class=rvts63>(</span><span class=rvts61>id </span><span class=rvts64>INT</span><span class=rvts63>);</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- declare the metadata of the table to be used</span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts64>CREATE</span><span class=rvts61> </span><span class=rvts64>PROCEDURE</span><span class=rvts61> my_procedure</span><span class=rvts63>(</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- create a function or stored procedure</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp; @tab table_type </span><span class=rvts64>READONLY</span><span class=rvts63>)</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- use the table type as input parameter type (READONLY is mandatory)</span></p>
<p><span class=rvts64>AS</span><span class=rvts61> </span><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts63>*</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> @tab&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- the table type parameter can be used like a regular table</span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts64>DECLARE</span><span class=rvts61> @my_table table_type</span><span class=rvts63>;</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- create a local variable of the table type</span></p>
<p><span class=rvts64>INSERT</span><span class=rvts61> </span><span class=rvts64>INTO</span><span class=rvts61> @my_table</span><span class=rvts64> </span><span class=rvts63>(</span><span class=rvts61>id</span><span class=rvts63>)</span><span class=rvts61> </span><span class=rvts64>VALUES </span><span class=rvts63>(</span><span class=rvts61>1</span><span class=rvts63>),(</span><span class=rvts61>2</span><span class=rvts63>),(</span><span class=rvts61>3</span><span class=rvts63>);</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- populate the table</span></p>
<p><span class=rvts64>EXECUTE</span><span class=rvts61> my_procedure</span><span class=rvts64> </span><span class=rvts61>@my_table</span><span class=rvts63>;</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- ... and pass it on to the function or procedure</span></p>
<p><span class=rvts62><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection6'>Compiled stored procedures (SQL Server 2016)</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts64>CREATE</span><span class=rvts61> </span><span class=rvts64>PROCEDURE</span><span class=rvts61> my_procedure</span><span class=rvts63>(...)</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- this stored procedure may ONLY access memory-optimised tables</span></p>
<p><span class=rvts64>WITH</span><span class=rvts61> </span><span class=rvts64>NATIVE_COMPILATION</span><span class=rvts63>,</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- natively compile the procedure via C-code into binary machine code</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts64>SCHEMABINDING</span><span class=rvts63>,</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- prevent reference objects (tables) from being [metadata-] modified</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts64>EXECUTE</span><span class=rvts61> </span><span class=rvts64>AS</span><span class=rvts61> </span><span class=rvts64>OWNER</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- set the executin context to control access permissions</span></p>
<p><span class=rvts64>AS</span><span class=rvts61> </span><span class=rvts64>BEGIN</span><span class=rvts61> </span><span class=rvts64>ATOMIC</span><span class=rvts61> </span><span class=rvts64>WITH</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- the procedure MUST be declared as an atomic transaction</span></p>
<p><span class=rvts63>(</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp; </span><span class=rvts64>TRANSACTION</span><span class=rvts61> </span><span class=rvts64>ISOLATION</span><span class=rvts61> </span><span class=rvts64>LEVEL</span><span class=rvts63>=</span><span class=rvts64>SNAPSHOT</span><span class=rvts63>,</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp; </span><span class=rvts64>LANGUAGE</span><span class=rvts61> </span><span class=rvts63>=</span><span class=rvts61> </span><span class=rvts66>N'us_english'</span></p>
<p><span class=rvts63>)</span></p>
<p><span class=rvts67>UPDATE</span><span class=rvts61> my_table </span><span class=rvts64>SET</span><span class=rvts61> col1</span><span class=rvts63>=</span><span class=rvts61>val1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- access in-memory tables just like regular ones</span></p>
<p><span class=rvts64>END</span></p>
<p><span class=rvts64><br></span></p>
<p><br></p>
<p><br></p>

