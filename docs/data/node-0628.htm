
<p><span class=rvts110><br></span></p>
<div id='nodeSection1'>Utility types (objects)</div>
<p><span class=rvts45><br></span></p>
<p class=rvps12><span class=rvts251>{ id: 1, data: { name: </span><span class=rvts289>"David"</span><span class=rvts251> } } </span><span class=rvts306>as</span><span class=rvts307> </span><span class=rvts306>const</span><span class=rvts251>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// recursively mark the object as read-only</span></p>
<p><span class=rvts211><br></span></p>
<p class=rvps12><span class=rvts288>Partial</span><span class=rvts251>&lt;{ a: </span><span class=rvts64>number</span><span class=rvts251>, b: </span><span class=rvts64>string</span><span class=rvts251> }&gt;  &nbsp;</span><span class=rvts252>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // make all fields optional: { a?: number, b?: string }</span></p>
<p class=rvps12><span class=rvts288>Required</span><span class=rvts251>&lt;{ a?: </span><span class=rvts64>number</span><span class=rvts251>, b?: </span><span class=rvts64>string</span><span class=rvts251> }&gt;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// make all fields mandatory: { a: number, b: string }</span></p>
<p class=rvps12><span class=rvts288>Readonly</span><span class=rvts251>&lt;{ a: </span><span class=rvts64>number</span><span class=rvts251>, b: </span><span class=rvts64>string</span><span class=rvts251> }&gt;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// make all fields read-only: { readonly a: number, readonly b: string }</span></p>
<p class=rvps12><span class=rvts288>Record</span><span class=rvts251>&lt;</span><span class=rvts289>"user"</span><span class=rvts251> | </span><span class=rvts289>"password"</span><span class=rvts251>, </span><span class=rvts64>string</span><span class=rvts251>&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// create properties of the same type: { user: string, password: string }</span></p>
<p class=rvps12><span class=rvts288>Pick</span><span class=rvts251>&lt;{ a: </span><span class=rvts64>number</span><span class=rvts251>, b: </span><span class=rvts64>string</span><span class=rvts251> }, </span><span class=rvts289>"a"</span><span class=rvts251>&gt;    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// select only the given fields: { a: number }</span></p>
<p class=rvps12><span class=rvts288>Omit</span><span class=rvts251>&lt;{ a: </span><span class=rvts64>number</span><span class=rvts251>, b: </span><span class=rvts64>string</span><span class=rvts251> }, </span><span class=rvts289>"a"</span><span class=rvts251>&gt;    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// select everything except the given fields: { b: string }</span></p>
<p class=rvps12><span class=rvts288><br></span></p>
<p class=rvps12><span class=rvts288>Exclude</span><span class=rvts251>&lt;</span><span class=rvts289>"a"</span><span class=rvts251> | </span><span class=rvts289>"b"</span><span class=rvts251> | </span><span class=rvts289>"c"</span><span class=rvts251>, </span><span class=rvts289>"b"</span><span class=rvts251> | </span><span class=rvts289>"c"</span><span class=rvts251>&gt;      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// exclude selected type(s) from a union: "a"</span></p>
<p class=rvps12><span class=rvts288>NonNullable</span><span class=rvts251>&lt;</span><span class=rvts64>string</span><span class=rvts251>[] | </span><span class=rvts64>null</span><span class=rvts251> | </span><span class=rvts64>undefined</span><span class=rvts251>&gt;    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// remove null and undefined: string[]</span></p>
<p class=rvps12><span class=rvts288><br></span></p>
<p class=rvps12><span class=rvts288>Parameters</span><span class=rvts251>&lt;</span><span class=rvts64>typeof</span><span class=rvts251> myFunction&gt;              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// tuple with a function's parameters: [number, string]</span></p>
<p class=rvps12><span class=rvts288>Parameters</span><span class=rvts251>&lt;</span><span class=rvts64>typeof</span><span class=rvts251> MyClass.prototype.myMethod&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// access instance methods via prototype</span></p>
<p class=rvps12><span class=rvts288>ConstructorParameters</span><span class=rvts251>&lt;</span><span class=rvts64>typeof</span><span class=rvts251> MyClass&gt;        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// get the parameters of the constructor</span></p>
<p class=rvps12><span class=rvts288>ReturnType</span><span class=rvts251>&lt;</span><span class=rvts64>typeof</span><span class=rvts251> myFunction&gt;              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// a function's return type</span></p>
<p class=rvps12><span class=rvts288>ReturnType</span><span class=rvts251>&lt;</span><span class=rvts64>typeof</span><span class=rvts251> MyClass.prototype.myMethod&gt;</span></p>
<p class=rvps12><span class=rvts251><br></span></p>
<p class=rvps12><span class=rvts288>InstanceType</span><span class=rvts251>&lt;</span><span class=rvts64>typeof</span><span class=rvts251> MyClass&gt;                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// returns MyClass (just makes sure that it has a constructor)</span></p>
<p class=rvps12><span class=rvts288>ThisParameterType</span><span class=rvts251>&lt;</span><span class=rvts64>typeof</span><span class=rvts251> MyClass.prototype.myMethod&gt;</span><span class=rvts252>// resolves the type of the "this" parameter in the function's parameter list</span></p>
<p class=rvps12><span class=rvts288>OmitThisParameter</span><span class=rvts251>&lt;</span><span class=rvts64>typeof</span><span class=rvts251> MyClass.prototype.myMethod&gt;</span><span class=rvts252>// remove the "this" parameter from the parameter list</span></p>
<p class=rvps12><span class=rvts288>ThisType</span><span class=rvts251>&lt;</span><span class=rvts288>MyClass</span><span class=rvts251>&gt;                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// not sure what that is</span></p>
<p><span class=rvts211><br></span></p>
<p class=rvps12><span class=rvts288>Awaited</span><span class=rvts251>&lt;Promise&lt;MyType&gt;&gt;                            </span><span class=rvts252>// unwrap a promise</span></p>
<p class=rvps12><span class=rvts252><br></span></p>
<p><span class=rvts211><br></span></p>
<p><span class=rvts110><br></span></p>
<div id='nodeSection2'>Utility types (strings)</div>
<p><span class=rvts45><br></span></p>
<p class=rvps12><span class=rvts251><br></span></p>
<p><span class=rvts288>Uppercase</span><span class=rvts251>&lt;</span><span class=rvts289>"Hello world!"</span><span class=rvts251>&gt;        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// "HELLO WORLD!"</span></p>
<p class=rvps12><span class=rvts288>Lowercase</span><span class=rvts251>&lt;</span><span class=rvts289>"Hello world!"</span><span class=rvts251>&gt;          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// "hello world!"</span></p>
<p class=rvps12><span class=rvts288>Capitalize</span><span class=rvts251>&lt;</span><span class=rvts289>"Hello world!"</span><span class=rvts251>&gt;&nbsp;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// "Hello world!"</span></p>
<p class=rvps12><span class=rvts288>Uncapitalize</span><span class=rvts251>&lt;</span><span class=rvts289>"HELLO WORLD!"</span><span class=rvts251>&gt;&nbsp;        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &nbsp;&nbsp;&nbsp; </span><span class=rvts252>// "hELLO WORLD!"</span></p>
<p><span class=rvts39><br></span></p>
<p><span class=rvts110><br></span></p>
<div id='nodeSection3'>Extracting types</div>
<p><span class=rvts45><br></span></p>
<p><span class=rvts45>keyof</span><span class=rvts41> </span><span class=rvts110>MyClass</span><span class=rvts41>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// string/number unions representing the keys of the given type</span></p>
<p><span class=rvts64>keyof </span><span class=rvts110>MyClass</span><span class=rvts292> </span><span class=rvts61>&amp;</span><span class=rvts292> </span><span class=rvts64>string&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=rvts61>&nbsp;</span><span class=rvts292>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// filter/treat all properties as string</span></p>
<p><span class=rvts110><br></span></p>
<p><span class=rvts45>typeof </span><span class=rvts251>myObjectOrFunction&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// use the type of an existing object</span></p>
<p><span class=rvts64>typeof</span><span class=rvts61> </span><span class=rvts292>MyClass</span><span class=rvts61>.</span><span class=rvts251>prototype</span><span class=rvts61>.myFunction&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=rvts251>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// extract class method types via "prototype"</span></p>
<p><span class=rvts39><br></span></p>
<p><span class=rvts110>MyClass</span><span class=rvts41>[</span><span class=rvts42>"myFunction"</span><span class=rvts41>]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// same as above</span></p>
<p><span class=rvts110>MyClass</span><span class=rvts41>[</span><span class=rvts42>"myFunction" | "myOtherFunction"</span><span class=rvts41>]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// produces a union</span></p>
<p><span class=rvts110>MyClass</span><span class=rvts116>[</span><span class=rvts45>keyof</span><span class=rvts116> </span><span class=rvts110>MyClass</span><span class=rvts116>]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// get a union of all properties' types</span></p>
<p><span class=rvts64><br></span></p>
<p class=rvps12><span class=rvts64>const</span><span class=rvts251> array = [</span></p>
<p class=rvps12><span class=rvts251>    { name: </span><span class=rvts289>"Alice"</span><span class=rvts251>, age: 15 },</span></p>
<p class=rvps12><span class=rvts251>    { name: </span><span class=rvts289>"Bob"</span><span class=rvts251>, age: 23n },</span></p>
<p class=rvps12><span class=rvts251>];</span></p>
<p class=rvps12><span class=rvts64>typeof</span><span class=rvts251> array[</span><span class=rvts64>number</span><span class=rvts251>]                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// extract the array elements' types</span></p>
<p class=rvps12><span class=rvts64>typeof</span><span class=rvts251> array[</span><span class=rvts64>number</span><span class=rvts251>][</span><span class=rvts289>"age"</span><span class=rvts251>]                    &nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// extract a single property's type</span></p>
<p><span class=rvts64><br></span></p>
<p><span class=rvts110><br></span></p>
<div id='nodeSection4'>Inferring nested types</div>
<p><span class=rvts45><br></span></p>
<p class=rvps12><span class=rvts64>type</span><span class=rvts251> Flatten&lt;</span><span class=rvts288>T</span><span class=rvts251>&gt; = </span><span class=rvts288>T</span><span class=rvts251> </span><span class=rvts64>extends</span><span class=rvts251> </span><span class=rvts288>Array</span><span class=rvts251>&lt;</span><span class=rvts64>infer</span><span class=rvts251> </span><span class=rvts288>E</span><span class=rvts251>&gt; ? </span><span class=rvts288>E</span><span class=rvts251> : </span><span class=rvts288>T</span><span class=rvts251>; </span><span class=rvts252>// infer the nested type</span></p>
<p class=rvps12><span class=rvts252><br></span></p>
<p class=rvps12><span class=rvts288>T</span><span class=rvts251> </span><span class=rvts64>extends</span><span class=rvts251> </span><span class=rvts288>PromiseLike</span><span class=rvts251>&lt;</span><span class=rvts64>infer</span><span class=rvts251> </span><span class=rvts288>U</span><span class=rvts251>&gt; ? </span><span class=rvts288>Awaited</span><span class=rvts251>&lt;</span><span class=rvts288>U</span><span class=rvts251>&gt; : </span><span class=rvts288>T</span><span class=rvts251>     </span><span class=rvts252>// unwrap the type within a promise</span></p>
<p class=rvps12><span class=rvts297><br></span></p>
<p class=rvps12><span class=rvts106>type</span><span class=rvts299> Flatten&lt;</span><span class=rvts305>T</span><span class=rvts299>&gt; = </span><span class=rvts305>T</span><span class=rvts299> </span><span class=rvts106>extends</span><span class=rvts299> </span><span class=rvts106>any</span><span class=rvts299>[] ? </span><span class=rvts305>T</span><span class=rvts299>[</span><span class=rvts106>number</span><span class=rvts299>] : </span><span class=rvts305>T</span><span class=rvts299>;&nbsp; </span><span class=rvts252>// same as above, but use "T[number]" to get the type of array elements</span></p>
<p class=rvps12><span class=rvts251><br></span></p>
<p class=rvps12><span class=rvts251><br></span></p>
<p><span class=rvts110><br></span></p>
<div id='nodeSection5'>Conditional types</div>
<p><span class=rvts45><br></span></p>
<p class=rvps12><span class=rvts64>function</span><span class=rvts251> fn&lt;</span><span class=rvts288>T</span><span class=rvts251> </span><span class=rvts64>extends</span><span class=rvts251> </span><span class=rvts288>RegExp</span><span class=rvts251> | </span><span class=rvts64>string</span><span class=rvts251>&gt;(x: </span><span class=rvts288>T</span><span class=rvts251>)</span></p>
<p class=rvps12><span class=rvts251>    : (T </span><span class=rvts64>extends</span><span class=rvts251> </span><span class=rvts288>RegExp</span><span class=rvts251> ? </span><span class=rvts64>number</span><span class=rvts251> : </span><span class=rvts64>string</span><span class=rvts251>) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// return value based on the input type</span></p>
<p class=rvps12><span class=rvts251>    </span><span class=rvts64>return</span><span class=rvts251> x instanceof </span><span class=rvts288>RegExp</span><span class=rvts251> ? 0 : </span><span class=rvts289>""</span><span class=rvts251>;    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// causes a compiler error - not sure why</span></p>
<p class=rvps12><span class=rvts251>}</span></p>
<p class=rvps12><span class=rvts251><br></span></p>
<p><span class=rvts110>MyClass</span><span class=rvts251> </span><span class=rvts64>extends</span><span class=rvts251> </span><span class=rvts288>RegExp</span><span class=rvts251> ? </span><span class=rvts64>number</span><span class=rvts251> : </span><span class=rvts64>string&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// </span></p>
<p><span class=rvts252><br></span></p>
<p class=rvps12><span class=rvts64>type</span><span class=rvts251> MessageOf&lt;</span><span class=rvts288>T</span><span class=rvts251>&gt; = </span><span class=rvts288>T</span><span class=rvts251> </span><span class=rvts64>extends</span><span class=rvts251> { message: </span><span class=rvts64>unknown</span><span class=rvts251> }&nbsp; </span><span class=rvts252>// get the type of a property if it exists (and return "never" otherwise)</span></p>
<p class=rvps12><span class=rvts251>&nbsp;&nbsp;&nbsp; ? </span><span class=rvts288>T</span><span class=rvts251>[</span><span class=rvts289>"message"</span><span class=rvts251>]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts252>// get the type of T's "message" property</span></p>
<p class=rvps12><span class=rvts251>&nbsp;&nbsp;&nbsp; : </span><span class=rvts64>never</span><span class=rvts251>;</span></p>
<p class=rvps12><span class=rvts251><br></span></p>
<p><span class=rvts110><br></span></p>
<p><span class=rvts110><br></span></p>
<div id='nodeSection6'>Mapped types (user-definied)</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts45>type</span><span class=rvts41> </span><span class=rvts110>Keys</span><span class=rvts41>&nbsp;&nbsp;&nbsp; = </span><span class=rvts42>"option1"</span><span class=rvts41> | </span><span class=rvts42>"option2"</span><span class=rvts41>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// define property names as union of string literals</span></p>
<p><span class=rvts45>type</span><span class=rvts41> </span><span class=rvts110>Options</span><span class=rvts41> = {[K </span><span class=rvts45>in</span><span class=rvts41> </span><span class=rvts110>Keys</span><span class=rvts41>]: </span><span class=rvts45>boolean</span><span class=rvts41> };&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// create a type that contains all these properties as boolean values</span></p>
<p class=rvps12><span class=rvts64><br></span></p>
<p class=rvps12><span class=rvts64>type</span><span class=rvts251> </span><span class=rvts292>Options</span><span class=rvts251>&lt;</span><span class=rvts288>T</span><span class=rvts251>&gt; = { [</span><span class=rvts288>K</span><span class=rvts251> in </span><span class=rvts64>keyof</span><span class=rvts251> </span><span class=rvts288>T</span><span class=rvts251>]: </span><span class=rvts64>boolean</span><span class=rvts251> };    &nbsp; </span><span class=rvts252>// recreate each property as a boolean</span></p>
<p><span class=rvts45>type</span><span class=rvts41> </span><span class=rvts110>Nullable</span><span class=rvts41>&lt;</span><span class=rvts288>T</span><span class=rvts41>&gt; = { [</span><span class=rvts288>K</span><span class=rvts41> </span><span class=rvts45>in</span><span class=rvts41> </span><span class=rvts45>keyof</span><span class=rvts41> </span><span class=rvts288>T</span><span class=rvts41>]: </span><span class=rvts288>T</span><span class=rvts41>[</span><span class=rvts288>K</span><span class=rvts41>] | </span><span class=rvts45>null; </span><span class=rvts41>} </span><span class=rvts39>// recreate each property as nullable</span></p>
<p class=rvps12><span class=rvts64>type</span><span class=rvts251> </span><span class=rvts292>Write</span><span class=rvts251>&lt;</span><span class=rvts288>T</span><span class=rvts251>&gt; = { </span><span class=rvts307>-</span><span class=rvts306>readonly</span><span class=rvts251> [</span><span class=rvts288>K</span><span class=rvts251> in </span><span class=rvts64>keyof</span><span class=rvts251> </span><span class=rvts288>T</span><span class=rvts251>]: </span><span class=rvts288>T</span><span class=rvts251>[</span><span class=rvts288>K</span><span class=rvts251>]; } </span><span class=rvts252>// remove the readonly property</span></p>
<p class=rvps12><span class=rvts64>type</span><span class=rvts251> </span><span class=rvts292>Mandatory</span><span class=rvts251>&lt;</span><span class=rvts288>T</span><span class=rvts251>&gt; = { [</span><span class=rvts288>K</span><span class=rvts251> in </span><span class=rvts64>keyof</span><span class=rvts251> </span><span class=rvts288>T</span><span class=rvts251>]</span><span class=rvts307>-?</span><span class=rvts251>: </span><span class=rvts288>T</span><span class=rvts251>[</span><span class=rvts288>K</span><span class=rvts251>]; };    </span><span class=rvts252>// remove the optional flag</span></p>
<p class=rvps12><span class=rvts251><br></span></p>
<p class=rvps12><span class=rvts64>type</span><span class=rvts251> </span><span class=rvts292>ReKey</span><span class=rvts251>&lt;</span><span class=rvts288>T</span><span class=rvts251>&gt; = { [</span><span class=rvts288>K</span><span class=rvts251> in </span><span class=rvts64>keyof</span><span class=rvts251> </span><span class=rvts288>T</span><span class=rvts251> </span><span class=rvts306>as</span><span class=rvts307> </span><span class=rvts306>string</span><span class=rvts251>]: </span><span class=rvts288>T</span><span class=rvts251>[</span><span class=rvts288>K</span><span class=rvts251>] }&nbsp; </span><span class=rvts252>// convert all keys into numbers (and preserve value types)</span></p>
<p class=rvps12><span class=rvts251><br></span></p>
<p class=rvps12><span class=rvts64>type</span><span class=rvts251> </span><span class=rvts292>Getters</span><span class=rvts251>&lt;</span><span class=rvts288>T</span><span class=rvts251>&gt; = {</span></p>
<p class=rvps12><span class=rvts251>    [</span><span class=rvts288>K</span><span class=rvts251> in </span><span class=rvts64>keyof</span><span class=rvts251> </span><span class=rvts288>T</span><span class=rvts251> </span><span class=rvts64>as</span><span class=rvts251> </span><span class=rvts289>`get</span><span class=rvts251>${</span><span class=rvts288>Capitalize</span><span class=rvts251>&lt;</span><span class=rvts64>string</span><span class=rvts251> &amp; </span><span class=rvts288>K</span><span class=rvts251>&gt;}</span><span class=rvts289>`</span><span class=rvts251>]:</span><span class=rvts252>// convert properties into getters (property name mapping)</span></p>
<p class=rvps12><span class=rvts251>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; () =&gt; </span><span class=rvts288>T</span><span class=rvts251>[</span><span class=rvts288>K</span><span class=rvts251>]    </span></p>
<p class=rvps12><span class=rvts251>};</span></p>
<p class=rvps12><span class=rvts251><br></span></p>
<p class=rvps12><span class=rvts64>type</span><span class=rvts251> </span><span class=rvts292>Remove</span><span class=rvts251>&lt;</span><span class=rvts288>T</span><span class=rvts251>&gt; = {</span></p>
<p class=rvps12><span class=rvts251>    [</span><span class=rvts288>K</span><span class=rvts251> in </span><span class=rvts64>keyof</span><span class=rvts251> </span><span class=rvts288>T</span><span class=rvts251> </span><span class=rvts64>as</span><span class=rvts251> </span><span class=rvts288>Exclude</span><span class=rvts251>&lt;</span><span class=rvts288>K</span><span class=rvts251>, </span><span class=rvts289>"prop"</span><span class=rvts251>&gt;]: </span><span class=rvts288>T</span><span class=rvts251>[</span><span class=rvts288>K</span><span class=rvts251>]      </span><span class=rvts252>// remove selected properties</span></p>
<p class=rvps12><span class=rvts251>};</span></p>
<p class=rvps12><span class=rvts251><br></span></p>
<p class=rvps12><span class=rvts64>type</span><span class=rvts251> </span><span class=rvts292>UnionKeys</span><span class=rvts251>&lt;</span><span class=rvts288>U</span><span class=rvts251> </span><span class=rvts64>extends</span><span class=rvts251> { type: </span><span class=rvts64>string</span><span class=rvts251> }&gt; = {</span></p>
<p class=rvps12><span class=rvts251>    [</span><span class=rvts288>T</span><span class=rvts251> in </span><span class=rvts288>U</span><span class=rvts251> </span><span class=rvts64>as</span><span class=rvts251> </span><span class=rvts288>T</span><span class=rvts251>[</span><span class=rvts289>"type"</span><span class=rvts251>]]: (event: </span><span class=rvts288>T</span><span class=rvts251>) =&gt; </span><span class=rvts64>void</span><span class=rvts251>;      </span><span class=rvts252>// create an object with one property for each union member</span></p>
<p class=rvps12><span class=rvts251>}                                                   </span><span class=rvts252>// e.g. Union&lt;string | number&gt; =&gt; { string: ..., number: ...}</span></p>
<p><span class=rvts39><br></span></p>
<p><br></p>
<p><br></p>

