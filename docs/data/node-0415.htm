
<div id='nodeSection1'>Iteration</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts64>for</span><span class=rvts113> (</span><span class=rvts64>int</span><span class=rvts113> index = 0; index &lt; 10; index++) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// variables declared inline live in the loop's scope only</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// ...</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span><span class=rvts64>break</span><span class=rvts113>;</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span><span class=rvts64>continue</span><span class=rvts113>;</span></p>
<p><span class=rvts113>}</span></p>
<p><span class=rvts113><br></span></p>
<p class=rvps11><span class=rvts111><br></span></p>
<p><span class=rvts111><br></span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts64>for</span><span class=rvts113> (</span><span class=rvts233>MyClass</span><span class=rvts113> item : myArrayOrCollection) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// this also works for multi-dimensional arrays (item itself is an array)</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span><span class=rvts233>System</span><span class=rvts113>.out.println(item);</span></p>
<p><span class=rvts113>}</span></p>
<p><span class=rvts61><br></span></p>
<p class=rvps11><span class=rvts111><br></span></p>
<p><span class=rvts111><br></span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts64>while</span><span class=rvts113> (condition) {</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// ...</span></p>
<p><span class=rvts113>}</span></p>
<p><span class=rvts61><br></span></p>
<p class=rvps11><span class=rvts111><br></span></p>
<p><span class=rvts111><br></span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts64>do</span><span class=rvts113> {</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// ...</span></p>
<p><span class=rvts113>} </span><span class=rvts64>while</span><span class=rvts113> (condition);</span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts233><br></span></p>
<div id='nodeSection2'>Conditional</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts64>if</span><span class=rvts113> (condition1) {</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// ...</span></p>
<p><span class=rvts113>} </span><span class=rvts64>else</span><span class=rvts113> </span><span class=rvts64>if</span><span class=rvts113> (condition2) {</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// ...</span></p>
<p><span class=rvts113>} </span><span class=rvts64>else</span><span class=rvts113> {</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// ..</span></p>
<p><span class=rvts113>}</span></p>
<p><span class=rvts113><br></span></p>
<p class=rvps11><span class=rvts111><br></span></p>
<p><span class=rvts111><br></span></p>
<p><span class=rvts12><br></span></p>
<p><span class=rvts64>switch</span><span class=rvts113> (expression) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// JDK 7 now also supports strings (before that: only numbers and enums)</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span><span class=rvts64>case</span><span class=rvts113> </span><span class=rvts217>"value 1"</span><span class=rvts113>:</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span><span class=rvts64>case</span><span class=rvts113> value2:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// multiple cases can lead into the same code block</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// ...</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts64>break</span><span class=rvts113>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// must use break to stop execution</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span><span class=rvts64>default</span><span class=rvts113>:</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// ...</span></p>
<p><span class=rvts113>}</span></p>
<p><span class=rvts113><br></span></p>
<p><span class=rvts233><br></span></p>
<div id='nodeSection3'>Goto</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts113>myOuterBlock: {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// give the block a symbolic name</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// ...</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; myInnerBlock: </span><span class=rvts64>for</span><span class=rvts113> (</span><span class=rvts64>int</span><span class=rvts113> i = 0; i &lt; 10; i++) {&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// loops can be labelled as well</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts64>if</span><span class=rvts113> (condition) </span><span class=rvts64>break</span><span class=rvts113> myOuterBlock;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// break out of the specified block and continue behind its end</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// ...</span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; }</span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts113>&nbsp;&nbsp;&nbsp; </span><span class=rvts62>// ...</span></p>
<p><span class=rvts113>}</span></p>
<p><span class=rvts113><br></span></p>
<p><br></p>
<p><br></p>

