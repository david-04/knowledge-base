
<div id='nodeSection1'>Arithmetic operators</div>
<p><span class=rvts264><br></span></p>
<p class=rvps12><span class=rvts262>+                                           </span><span class=rvts263># add</span></p>
<p class=rvps12><span class=rvts262>-                                           </span><span class=rvts263># subtract</span></p>
<p class=rvps12><span class=rvts262>*                                           </span><span class=rvts263># multiply</span></p>
<p class=rvps12><span class=rvts262>/                                           </span><span class=rvts263># divide</span></p>
<p class=rvps12><span class=rvts262>%                                           </span><span class=rvts263># modulo</span></p>
<p class=rvps12><span class=rvts262>**                                          </span><span class=rvts263># potentize</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection2'>Comparison operators</div>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts262>x ==  y                                     </span><span class=rvts263># equal</span></p>
<p class=rvps12><span class=rvts262>x.eql?(y)                                   </span><span class=rvts263># same type and value (1 == 1.0 is true but 1.eq?(1.0) is false)</span></p>
<p class=rvps12><span class=rvts262>x.eqlal?(y)                                 </span><span class=rvts263># same object instance</span></p>
<p class=rvps12><span class=rvts262>===                                         </span><span class=rvts263># used in when clause, e.g. (1...10) === 5 returns true</span></p>
<p><span class=rvts264><br></span></p>
<p class=rvps12><span class=rvts262>x !=  y                                     </span><span class=rvts263># not equal</span></p>
<p class=rvps12><span class=rvts262>x &lt;   y                                     </span><span class=rvts263># less than</span></p>
<p class=rvps12><span class=rvts262>x &lt;=  y                                     </span><span class=rvts263># less than or equal</span></p>
<p class=rvps12><span class=rvts262>x &gt;   y                                     </span><span class=rvts263># greater than</span></p>
<p class=rvps12><span class=rvts262>x &gt;=  y                                     </span><span class=rvts263># greater than or equal</span></p>
<p class=rvps12><span class=rvts262>x &lt;=&gt; y                                     </span><span class=rvts263># comparison (-1, 0, 1)</span></p>
<p class=rvps12><span class=rvts263><br></span></p>
<p class=rvps12><span class=rvts262>text =~ </span><span class=rvts266>/[a-z]/</span><span class=rvts262>         &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  </span><span class=rvts263># match regular expression</span></p>
<p class=rvps12><span class=rvts263><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection3'>Logial operators</div>
<p><span class=rvts264><br></span></p>
<p class=rvps12><span class=rvts265>&amp;&amp;</span><span class=rvts262>                                          </span><span class=rvts263># and</span></p>
<p class=rvps12><span class=rvts265>and</span><span class=rvts262>                                         </span></p>
<p class=rvps12><span class=rvts265>||</span><span class=rvts262>                                          </span><span class=rvts263># or</span></p>
<p class=rvps12><span class=rvts265>or</span><span class=rvts262>                                          </span></p>
<p class=rvps12><span class=rvts265>!</span><span class=rvts262>                                           </span><span class=rvts263># not</span></p>
<p class=rvps12><span class=rvts265>not</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection4'>Bitwise operators</div>
<p><span class=rvts264><br></span></p>
<p class=rvps12><span class=rvts262>&amp;                                           </span><span class=rvts263># binary and</span></p>
<p class=rvps12><span class=rvts262>|                                           </span><span class=rvts263># binary or</span></p>
<p class=rvps12><span class=rvts265>^</span><span class=rvts262>                                           </span><span class=rvts263># binary xor</span></p>
<p class=rvps12><span class=rvts262>~                                           </span><span class=rvts263># binary complement/invert</span></p>
<p class=rvps12><span class=rvts262>&lt;&lt;                                          </span><span class=rvts263># binary left shift</span></p>
<p class=rvps12><span class=rvts262>&gt;&gt;                                          </span><span class=rvts263># binary right shift</span></p>
<p class=rvps12><span class=rvts263><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection5'>Assignment operators</div>
<p><span class=rvts264><br></span></p>
<p class=rvps12><span class=rvts262>=                                           </span><span class=rvts263># assign</span></p>
<p class=rvps12><span class=rvts262>+=                                          </span><span class=rvts263># add</span></p>
<p class=rvps12><span class=rvts262>-=                                          </span><span class=rvts263># subtract</span></p>
<p class=rvps12><span class=rvts262>*=                                          </span><span class=rvts263># multiply</span></p>
<p class=rvps12><span class=rvts262>/=                                          </span><span class=rvts263># divide</span></p>
<p class=rvps12><span class=rvts262>%=                                          </span><span class=rvts263># modulo</span></p>
<p class=rvps12><span class=rvts262>**=                                         </span><span class=rvts263># exponent</span></p>
<p class=rvps12><span class=rvts262>||=                                         </span><span class=rvts263># replace if nil</span></p>
<p class=rvps12><span class=rvts262>&amp;&amp;=                                         </span><span class=rvts263># replace if not nil</span></p>
<p class=rvps12><span class=rvts264><br></span></p>
<p class=rvps12><span class=rvts262>a, b, c = 10, 20, 30                        </span><span class=rvts263># simultaneous assignments</span></p>
<p class=rvps12><span class=rvts263><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection6'>Range operators</div>
<p><span class=rvts12><br></span></p>
<p class=rvps12><span class=rvts262>1..5                                        </span><span class=rvts263># 1-5</span></p>
<p class=rvps12><span class=rvts262>1...5                                       </span><span class=rvts263># 1-4</span></p>
<p class=rvps12><span class=rvts263><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection7'>Other operators</div>
<p><span class=rvts264><br></span></p>
<p class=rvps12><span class=rvts262>age &lt; 18 ? </span><span class=rvts266>"child"</span><span class=rvts262> : </span><span class=rvts266>"adult"</span><span class=rvts262>                </span><span class=rvts263># ternary operator</span></p>
<p class=rvps12><span class=rvts265>defined?</span><span class=rvts262> my_variable                        </span><span class=rvts263># returns nil if undefined</span></p>
<p class=rvps12><span class=rvts262>::my_variable                               </span><span class=rvts263># scope resolution operator (access variable in outer scope)</span></p>
<p class=rvps12><span class=rvts267>MyModule</span><span class=rvts262>::my_variable&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts263># ...or in another/different scope</span></p>
<p class=rvps12><span class=rvts266><br></span></p>
<p><br></p>
<p><br></p>

