
<div id='nodeSection1'>SQL Select</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> c</span><span class=rvts63>.</span><span class=rvts61>name </span><span class=rvts64>as</span><span class=rvts61> </span><span class=rvts66>'Customer Name'</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> customer c</span><span class=rvts63>;</span><span class=rvts61>&nbsp;&nbsp; </span><span class=rvts62>-- aliasing tables and columns</span></p>
<p><span class=rvts62><br></span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts67>ISNULL</span><span class=rvts63>(</span><span class=rvts61>name</span><span class=rvts63>,</span><span class=rvts61> </span><span class=rvts66>'Anonymous'</span><span class=rvts63>)</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> customer</span><span class=rvts63>;</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- use a default </span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts64>CASE</span><span class=rvts61> customer_type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- embedded CASE</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts64>WHEN</span><span class=rvts61> 1 </span><span class=rvts64>THEN</span><span class=rvts61> </span><span class=rvts66>'Prospect'</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts64>WHEN</span><span class=rvts61> 2 </span><span class=rvts64>THEN</span><span class=rvts61> </span><span class=rvts66>'Existing customer'</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts64>ELSE</span><span class=rvts61> </span><span class=rvts66>'Unknown'</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts64>END</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts64>FROM</span><span class=rvts61> customer</span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts64>CASE</span><span class=rvts61> </span><span class=rvts64>WHEN</span><span class=rvts61> customer_type</span><span class=rvts63>=</span><span class=rvts61>1 </span><span class=rvts64>THEN</span><span class=rvts61> </span><span class=rvts66>'Prospect'</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts64>WHEN</span><span class=rvts61> id </span><span class=rvts63>&lt;</span><span class=rvts61> 1000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts64>THEN</span><span class=rvts61> </span><span class=rvts66>'Old customer'</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts64>ELSE</span><span class=rvts61> </span><span class=rvts66>'Unknown'</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts64>END</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts64>FROM</span><span class=rvts61> customer</span></p>
<p><span class=rvts62><br></span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts67>$identity</span><span class=rvts63>,</span><span class=rvts61> </span><span class=rvts67>IDENT_SEED</span><span class=rvts63>(</span><span class=rvts67>$identity</span><span class=rvts63>),</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- select the column that has the IDENTITY attribute, as well as the</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts67>IDENT_INCR</span><span class=rvts63>(</span><span class=rvts67>$identity</span><span class=rvts63>)</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> customer</span><span class=rvts63>;</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- sequence's start value and increment</span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection2'>Conditions</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts63>*</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> customer </span><span class=rvts64>WHERE</span><span class=rvts61> name </span><span class=rvts63>LIKE</span><span class=rvts61> </span><span class=rvts66>'Da%'</span><span class=rvts63>;</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- wildcard "%" stands for any string (of any length)</span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts63>*</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> customer </span><span class=rvts64>WHERE</span><span class=rvts61> name </span><span class=rvts63>LIKE</span><span class=rvts61> </span><span class=rvts66>'Me_er'</span><span class=rvts63>;</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- wildcard "_" stands for a single character</span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts63>*</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> customer </span><span class=rvts64>WHERE</span><span class=rvts61> name </span><span class=rvts63>LIKE</span><span class=rvts61> </span><span class=rvts66>'[A-M]%'</span><span class=rvts63>;</span><span class=rvts61>&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- character classes</span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts63>*</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> customer </span><span class=rvts64>WHERE</span><span class=rvts61> name </span><span class=rvts63>LIKE</span><span class=rvts61> </span><span class=rvts66>'[^A-M]%'</span><span class=rvts63>;</span><span class=rvts61>&nbsp;&nbsp; </span><span class=rvts62>-- character classes</span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts63>*</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> customer </span><span class=rvts64>WHERE</span><span class=rvts61> name </span><span class=rvts63>LIKE</span><span class=rvts61> </span><span class=rvts66>'[_]%'</span><span class=rvts63>;</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- escape special characters by surrounding them with brackets</span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts63>*</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> customer </span><span class=rvts64>WHERE</span><span class=rvts61> name </span><span class=rvts63>LIKE</span><span class=rvts61> </span><span class=rvts66>'\_%'</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- or use and declare an escape character</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts64>ESCAPE</span><span class=rvts61> </span><span class=rvts66>'\'</span><span class=rvts63>;</span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts63>*</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> customer </span><span class=rvts64>WHERE</span><span class=rvts61> id </span><span class=rvts63>IN</span><span class=rvts64> </span><span class=rvts63>(</span><span class=rvts61>1</span><span class=rvts63>,</span><span class=rvts61>2</span><span class=rvts63>,</span><span class=rvts61>3</span><span class=rvts63>);</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- compare to an enumeration</span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts63>*</span><span class=rvts61> </span><span class=rvts64>from</span><span class=rvts61> customer </span><span class=rvts64>WHERE</span><span class=rvts61> id </span><span class=rvts63>BETWEEN</span><span class=rvts61> 10 </span><span class=rvts63>AND</span><span class=rvts61> 20</span><span class=rvts63>;</span><span class=rvts61>&nbsp; </span><span class=rvts62>-- compare to the range [10;20] (both inclusive)</span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts63>*</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> customer </span><span class=rvts64>ORDER</span><span class=rvts61> </span><span class=rvts64>BY</span><span class=rvts61> id OFFSET 5 </span><span class=rvts64>ROWS</span><span class=rvts61>&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- skip the first 5 records (only works with an ORDER BY clause)</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts64>FETCH</span><span class=rvts61> </span><span class=rvts64>NEXT</span><span class=rvts61> 5 </span><span class=rvts64>ROWS</span><span class=rvts61> ONLY</span><span class=rvts63>;</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- select only the next 5 records</span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts64>TOP</span><span class=rvts63>(</span><span class=rvts61>5</span><span class=rvts63>)</span><span class=rvts61> </span><span class=rvts63>*</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> my_table </span><span class=rvts64>ORDER</span><span class=rvts61> </span><span class=rvts64>BY</span><span class=rvts61> </span><span class=rvts63>...;</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- select only the first 5 records (can be used with UPDATE and DELETE as well)</span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts64>TOP</span><span class=rvts63>(</span><span class=rvts61>5</span><span class=rvts63>)</span><span class=rvts61> </span><span class=rvts64>PERCENT</span><span class=rvts61> </span><span class=rvts64>WITH</span><span class=rvts61> TIES </span><span class=rvts63>*</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> my_table</span><span class=rvts63>;</span><span class=rvts61>&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- select the first 5% (WITH TIES also selects the following records with the same key)</span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection3'>Multi-sets</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts64>UNION</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- join both sets but discard duplicates</span></p>
<p><span class=rvts64>UNION</span><span class=rvts61> </span><span class=rvts63>ALL</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- join both sets and keep duplicates</span></p>
<p><span class=rvts64>INTERSECT</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- records contained in both sets</span></p>
<p><span class=rvts64>EXCEPT</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- minus</span></p>
<p><span class=rvts62><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection4'>Subqueries</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts63>*</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> customer </span><span class=rvts64>WHERE</span><span class=rvts61> id </span><span class=rvts63>=</span><span class=rvts64> </span><span class=rvts63>(</span><span class=rvts64>select</span><span class=rvts61> </span><span class=rvts63>...);</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- sub-select</span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts63>*</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> customer </span><span class=rvts64>WHERE</span><span class=rvts61> id </span><span class=rvts63>in</span><span class=rvts64> </span><span class=rvts63>(</span><span class=rvts64>select</span><span class=rvts61> </span><span class=rvts63>...);</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts63>*</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> customer </span><span class=rvts64>WHERE</span><span class=rvts61> id </span><span class=rvts63>&lt;</span><span class=rvts61> </span><span class=rvts63>ANY</span><span class=rvts64> </span><span class=rvts63>(</span><span class=rvts64>select</span><span class=rvts61> </span><span class=rvts63>...);</span><span class=rvts61> </span><span class=rvts62>-- at least one value of the inner select must be greater than id</span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts63>*</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> customer </span><span class=rvts64>WHERE</span><span class=rvts61> id </span><span class=rvts63>&lt;</span><span class=rvts61> </span><span class=rvts63>ALL</span><span class=rvts64> </span><span class=rvts63>(</span><span class=rvts64>select</span><span class=rvts61> </span><span class=rvts63>...);</span><span class=rvts61> </span><span class=rvts62>-- all values of the inner select must be greater than the id</span></p>
<p><span class=rvts62><br></span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts63>*</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> tab </span><span class=rvts64>WHERE</span><span class=rvts61> </span><span class=rvts63>EXISTS</span><span class=rvts64> </span><span class=rvts63>(</span><span class=rvts64>select</span><span class=rvts61> </span><span class=rvts63>*</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> </span><span class=rvts63>...);</span></p>
<p><span class=rvts63><br></span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts63>*</span><span class=rvts61> </span><span class=rvts64>FROM </span><span class=rvts63>(</span><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts63>...);</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- a subselect can be placed wherever a table name is expected</span></p>
<p><span class=rvts62><br></span></p>
<p><span class=rvts64>WITH</span><span class=rvts61> virtual_table</span><span class=rvts63>(</span><span class=rvts61>col1</span><span class=rvts63>,</span><span class=rvts61> col2</span><span class=rvts63>)</span><span class=rvts61> </span><span class=rvts64>AS</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- prepare a selection/view to be used like a table later on</span></p>
<p><span class=rvts64>&nbsp;&nbsp;&nbsp; </span><span class=rvts63>(</span><span class=rvts64>SELECT</span><span class=rvts61> col1</span><span class=rvts63>,</span><span class=rvts61> col2 </span><span class=rvts64>FROM</span><span class=rvts61> my_real_table</span><span class=rvts63>)</span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts63>*</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> virtual_table&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- reference the above selection/view as if it was a regular table</span></p>
<p><span class=rvts9><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection5'>Joins</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> customer</span><span class=rvts63>.*,</span><span class=rvts61> orders</span><span class=rvts63>.*</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> customer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- inner join</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts71>INNER</span><span class=rvts72> </span><span class=rvts71>JOIN</span><span class=rvts61> orders&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- the INNER is optional and can be left out</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts64>ON</span><span class=rvts61> customer</span><span class=rvts63>.</span><span class=rvts61>id </span><span class=rvts63>=</span><span class=rvts61> orders</span><span class=rvts63>.</span><span class=rvts61>customer_id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts64>WHERE</span><span class=rvts61> </span><span class=rvts63>...</span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts63>*</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> customer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- outer join</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts71>LEFT</span><span class=rvts72> </span><span class=rvts71>OUTER</span><span class=rvts72> </span><span class=rvts71>JOIN</span><span class=rvts61> orders&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- OUTER is optional, other variants: RIGHT [OUTER] JOIN and FULL [OUTER] JOIN</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts64>ON</span><span class=rvts61> customer</span><span class=rvts63>.</span><span class=rvts61>id </span><span class=rvts63>=</span><span class=rvts61> orders</span><span class=rvts63>.</span><span class=rvts61>customer_id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts63>*</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> customer </span><span class=rvts71>CROSS</span><span class=rvts72> </span><span class=rvts71>JOIN</span><span class=rvts61> promotion</span><span class=rvts63>;</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- cartesian product</span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection6'>Grouping</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts63>*</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> customer </span><span class=rvts64>GROUP</span><span class=rvts61> </span><span class=rvts64>BY </span><span class=rvts63>();</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- condense all records into a single group (recommended syntax for aggregate functions)</span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts67>AVG</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- average</span></p>
<p><span class=rvts67>MIN</span><span class=rvts61> </span><span class=rvts63>/</span><span class=rvts61> </span><span class=rvts67>MAX</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- minimum and maximum</span></p>
<p><span class=rvts67>SUM</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- sum</span></p>
<p><span class=rvts67>COUNT</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- number of non-null values (or numer of all rows for COUNT(*))</span></p>
<p><span class=rvts67>COUNT_BIG</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- like COUNT but returns a BIGINT</span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts67>VAR</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- variance of all the values</span></p>
<p><span class=rvts67>VARP</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- variance for the population of all the values</span></p>
<p><span class=rvts67>STDEV</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- standard deviation</span></p>
<p><span class=rvts67>STDEVP</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- standard deviation for the population of all values</span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection7'>OLAP extensions</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> col1</span><span class=rvts63>,</span><span class=rvts61> </span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp; </span><span class=rvts67>MAX</span><span class=rvts63>(</span><span class=rvts61>col2</span><span class=rvts63>)</span><span class=rvts61> </span><span class=rvts64>OVER </span><span class=rvts63>(</span><span class=rvts64>PARTITION</span><span class=rvts61> </span><span class=rvts64>By</span><span class=rvts61> col3 </span><span class=rvts64>ORDER</span><span class=rvts61> </span><span class=rvts64>BY</span><span class=rvts61> col4</span><span class=rvts63>)</span><span class=rvts62>-- select an aggreagte from a partition WITHOUT actually grouping (condensing) results</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp; </span><span class=rvts64>FROM</span><span class=rvts61> my_table</span><span class=rvts63>;</span></p>
<p><span class=rvts63><br></span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> col1</span><span class=rvts63>,</span><span class=rvts61> col2</span><span class=rvts63>,</span><span class=rvts61> </span><span class=rvts67>SUM</span><span class=rvts63>(</span><span class=rvts61>col3</span><span class=rvts63>)</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- GROUP BY with CUBE or ROLLUP causes additional sum lines</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp; </span><span class=rvts64>FROM</span><span class=rvts61> my_table&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- (grand totals) to be inserted; CUBE creates every type of grand total while</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp; </span><span class=rvts64>GROUP</span><span class=rvts61> </span><span class=rvts64>BY</span><span class=rvts61> </span><span class=rvts63>{</span><span class=rvts64>CUBE</span><span class=rvts63>|</span><span class=rvts64>ROLLUP</span><span class=rvts63>}</span><span class=rvts64> </span><span class=rvts63>(</span><span class=rvts61>col1</span><span class=rvts63>,</span><span class=rvts61> col2</span><span class=rvts63>);</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- ROLLUP aggregates based on the order in which the columns have been specified</span></p>
<p><span class=rvts62><br></span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> col1</span><span class=rvts63>,</span><span class=rvts61> col2</span><span class=rvts63>,</span><span class=rvts61> </span><span class=rvts67>SUM</span><span class=rvts63>(</span><span class=rvts61>col3</span><span class=rvts63>),</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- GROUP BY with CUBE or ROLLUP causes additional sum lines (grand totals) to be inserted</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp; </span><span class=rvts67>GROUPING</span><span class=rvts63>(</span><span class=rvts61>col2</span><span class=rvts63>),</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- returns 1 if this is grand total (and 0 otherwise)</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp; </span><span class=rvts67>GROUPING_ID</span><span class=rvts63>(</span><span class=rvts61>col1</span><span class=rvts63>,</span><span class=rvts61> col2</span><span class=rvts63>)</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- return a bit mask (as integer) indicating which columns are grand totaled in this line</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp; </span><span class=rvts64>FROM</span><span class=rvts61> my_table&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- ; CUBE creates every type of grand total while</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp; </span><span class=rvts64>GROUP</span><span class=rvts61> </span><span class=rvts64>BY</span><span class=rvts61> </span><span class=rvts63>{</span><span class=rvts64>CUBE</span><span class=rvts63>|</span><span class=rvts64>ROLLUP</span><span class=rvts63>}</span><span class=rvts64> </span><span class=rvts63>(</span><span class=rvts61>col1</span><span class=rvts63>,</span><span class=rvts61> col2</span><span class=rvts63>);</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- ROLLUP aggregates based on the order in which the columns have been specified</span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> col1</span><span class=rvts63>,</span><span class=rvts61> col2</span><span class=rvts63>,</span><span class=rvts61> </span><span class=rvts67>SUM</span><span class=rvts63>(</span><span class=rvts61>col3</span><span class=rvts63>)</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- grouping sets group result sets by mutliple grouping criteria</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp; </span><span class=rvts64>GROUP</span><span class=rvts61> </span><span class=rvts64>BY</span><span class=rvts61> </span><span class=rvts67>GROUPING</span><span class=rvts61> </span><span class=rvts64>SETS </span><span class=rvts63>((</span><span class=rvts61>col1</span><span class=rvts63>,</span><span class=rvts61> col2</span><span class=rvts63>),(</span><span class=rvts61>col1</span><span class=rvts63>),());</span><span class=rvts62>-- and merge all of them into a single result set</span></p>
<p><span class=rvts62><br></span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts63>{</span><span class=rvts67>RANK</span><span class=rvts63>|</span><span class=rvts67>DENSE_RANK</span><span class=rvts63>|</span><span class=rvts67>ROW_NUMBER</span><span class=rvts63>}()</span><span class=rvts61>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- RANK returns the ranking position within the partition (here: all records)</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp; </span><span class=rvts64>OVER </span><span class=rvts63>(</span><span class=rvts64>ORDER</span><span class=rvts61> </span><span class=rvts64>BY</span><span class=rvts61> col1</span><span class=rvts63>)</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> my_table</span><span class=rvts63>;</span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> </span><span class=rvts67>NTILE</span><span class=rvts63>(</span><span class=rvts61>4</span><span class=rvts63>)</span><span class=rvts61> </span><span class=rvts64>OVER </span><span class=rvts63>(</span><span class=rvts64>ORDER</span><span class=rvts61> </span><span class=rvts64>BY</span><span class=rvts61> col1</span><span class=rvts63>)</span><span class=rvts61> </span><span class=rvts64>FROM</span><span class=rvts61> my_table</span><span class=rvts63>;</span><span class=rvts61> </span><span class=rvts62>-- group the data into 4 segments and return the segment number (1...4)</span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts64>SELECT</span><span class=rvts61> [1] </span><span class=rvts64>as</span><span class=rvts61> a</span><span class=rvts63>,</span><span class=rvts61> [2] </span><span class=rvts64>AS</span><span class=rvts61> b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts62>-- this is some kind of mysterious pivot table</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp; </span><span class=rvts64>FROM </span><span class=rvts63>(</span><span class=rvts64>SELECT</span><span class=rvts61> name</span><span class=rvts63>,</span><span class=rvts61> id </span><span class=rvts64>FROM</span><span class=rvts61> CUSTOMER</span><span class=rvts63>)</span><span class=rvts61> c</span></p>
<p><span class=rvts61>&nbsp;&nbsp;&nbsp; </span><span class=rvts63>PIVOT(</span><span class=rvts67>COUNT</span><span class=rvts63>(</span><span class=rvts61>name</span><span class=rvts63>)</span><span class=rvts61> </span><span class=rvts64>FOR</span><span class=rvts61> id </span><span class=rvts63>in</span><span class=rvts64> </span><span class=rvts63>(</span><span class=rvts61>[1]</span><span class=rvts63>,</span><span class=rvts61> [2]</span><span class=rvts63>))</span><span class=rvts61> </span><span class=rvts64>AS</span><span class=rvts61> c2</span></p>
<p><span class=rvts61><br></span></p>
<p><br></p>
<p><br></p>

