
<div id='nodeSection1'>Object destructuring</div>
<p><span class=rvts12><br></span></p>
<p class=rvps12><span class=rvts64>let</span><span class=rvts251> { prop1, prop2 } = myObject;                    </span><span class=rvts252>// destructure an object into new variables</span></p>
<p class=rvps12><span class=rvts251><br></span></p>
<p class=rvps12><span class=rvts251>&nbsp;&nbsp; ({ prop3, prop4 } = myObject);                   </span><span class=rvts252>// re-assign pre-existing variables (requires brackets)</span></p>
<p class=rvps12><span class=rvts251><br></span></p>
<p class=rvps12><span class=rvts64>let</span><span class=rvts251> { prop5, ...rest } = myObject;                  </span><span class=rvts252>// assign all non-destructured properties to the rest parameter</span></p>
<p class=rvps12><span class=rvts251><br></span></p>
<p class=rvps12><span class=rvts64>let</span><span class=rvts251> { prop6: alias = </span><span class=rvts289>"default"</span><span class=rvts251> } = myObject;        </span><span class=rvts252>// can assign alias names and provide default/fallback values</span></p>
<p class=rvps12><span class=rvts251><br></span></p>
<p class=rvps12><span class=rvts64>function</span><span class=rvts251> myFunction(                                </span><span class=rvts252>// destructuring function parameters</span></p>
<p class=rvps12><span class=rvts251>    { prop7, prop8: alias = </span><span class=rvts289>"default"</span><span class=rvts251>, ...rest }    </span><span class=rvts252>// can use the same features as when destructuring into variables</span></p>
<p class=rvps12><span class=rvts251>        : </span><span class=rvts288>MyClass</span></p>
<p class=rvps12><span class=rvts251>        = { prop7: </span><span class=rvts289>"default"</span><span class=rvts251> }                      </span><span class=rvts252>// default value if the parameter is omitted completely</span></p>
<p class=rvps12><span class=rvts251>) { }</span></p>
<p><span class=rvts61><br></span></p>
<p><span class=rvts110><br></span></p>
<div id='nodeSection2'>Array and tuple destructuring</div>
<p><span class=rvts12><br></span></p>
<p class=rvps12><span class=rvts64>let</span><span class=rvts251> [item1, item2] = arrayOrTuple;                  </span><span class=rvts252>// destructure an array or tuple into new variables</span></p>
<p class=rvps12><span class=rvts251><br></span></p>
<p class=rvps12><span class=rvts251>[a, b] = [b, a];                                    </span><span class=rvts252>// re-assign pre-existing variables</span></p>
<p class=rvps12><span class=rvts251><br></span></p>
<p class=rvps12><span class=rvts64>let</span><span class=rvts251> [first, ...other] = arrayOrTuple;               </span><span class=rvts252>// assign all non-destructured items to the rest parameter</span></p>
<p class=rvps12><span class=rvts251><br></span></p>
<p class=rvps12><span class=rvts64>let</span><span class=rvts251> [, second, , fourth] = arrayOrTuple;            </span><span class=rvts252>// exclude some elements</span></p>
<p class=rvps12><span class=rvts251><br></span></p>
<p class=rvps12><span class=rvts64>let</span><span class=rvts251> [val1, val2 = </span><span class=rvts289>"default"</span><span class=rvts251>, val3] = arrayOrTuple;  </span><span class=rvts252>// use a default for missing items</span></p>
<p class=rvps12><span class=rvts251><br></span></p>
<p class=rvps12><span class=rvts64>function</span><span class=rvts251> myFunction(                                </span><span class=rvts252>// destructuring function parameters</span></p>
<p class=rvps12><span class=rvts251>    [ item1, item2 = </span><span class=rvts289>"default"</span><span class=rvts251>, ...rest ]           </span><span class=rvts252>// can use the same features as when destructuring into variables</span></p>
<p class=rvps12><span class=rvts251>        : </span><span class=rvts288>MyArrayOrTuple</span></p>
<p class=rvps12><span class=rvts251>        = [1, 2]                                    </span><span class=rvts252>// default value if the parameter is omitted completely</span></p>
<p class=rvps12><span class=rvts251>) { }</span></p>
<p><span class=rvts41><br></span></p>
<p><span class=rvts110><br></span></p>
<div id='nodeSection3'>Spread</div>
<p><span class=rvts12><br></span></p>
<p><span class=rvts45>let</span><span class=rvts41> person&nbsp;&nbsp; = { name: </span><span class=rvts42>"David"</span><span class=rvts41>, age: 38 };</span></p>
<p><span class=rvts45>let</span><span class=rvts41> employee = { ...person, employeeId: 21321 };&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// copy </span><span class=rvts44>own enumerable properties (not functions)</span><span class=rvts39> and other values into a new object</span></p>
<p><span class=rvts45>let</span><span class=rvts41> witness&nbsp; = { ...person, name: </span><span class=rvts42>"D**"</span><span class=rvts41> };&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=rvts39>// can also be used to overwrite pre-existing values</span></p>
<p><span class=rvts12><br></span></p>
<p><span class=rvts45>let</span><span class=rvts41> array1 = [1, 2];</span></p>
<p><span class=rvts45>let</span><span class=rvts41> array2 = [3, 4];</span></p>
<p><span class=rvts45>let</span><span class=rvts41> arrayCombined = [0, ...array1, ...array2, 5];&nbsp;&nbsp; </span><span class=rvts39>// add all array elements into another array (shallow copy)</span></p>
<p><span class=rvts39><br></span></p>
<p><br></p>
<p><br></p>

