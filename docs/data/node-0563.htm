
<div id='nodeSection1'>HTTP server</div>
<p><span class=rvts264><br></span></p>
<p class=rvps12><span class=rvts265>require</span><span class=rvts262> </span><span class=rvts266>'webrick'</span><span class=rvts262>                           </span><span class=rvts263># gem install webrick</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts265>class</span><span class=rvts262> </span><span class=rvts267>MyServer &lt; WEBrick::HTTPServlet::AbstractServlet</span><span class=rvts262>   </span><span class=rvts263># implement custom HTTP server</span></p>
<p class=rvps12><span class=rvts262>  </span><span class=rvts265>def</span><span class=rvts262> do_GET(request, response)             </span><span class=rvts263># callback for GET requests</span></p>
<p class=rvps12><span class=rvts262>    </span><span class=rvts265>puts</span><span class=rvts262> request.path                            </span><span class=rvts263># can access the request object</span></p>
<p class=rvps12><span class=rvts262>    response.status = 200                   </span><span class=rvts263># set response headers</span></p>
<p class=rvps12><span class=rvts262>    response.content_type = </span><span class=rvts266>"text/plain"</span></p>
<p class=rvps12><span class=rvts262>    response.body = </span><span class=rvts266>"Hello, world!"</span><span class=rvts262>         </span><span class=rvts263># set response payload</span></p>
<p class=rvps12><span class=rvts262>  </span><span class=rvts265>end</span></p>
<p class=rvps12><span class=rvts265>end</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts262>server = </span><span class=rvts267>WEBrick</span><span class=rvts262>::</span><span class=rvts267>HTTPServer</span><span class=rvts262>.</span><span class=rvts265>new</span><span class=rvts262>(           </span><span class=rvts263># create the server</span></p>
<p class=rvps12><span class=rvts262>  :Port =&gt; 1234</span></p>
<p class=rvps12><span class=rvts262>)</span></p>
<p class=rvps12><span class=rvts262>server.mount </span><span class=rvts266>"/"</span><span class=rvts262>, MyServer                  </span><span class=rvts263># add routing rules</span></p>
<p class=rvps12><span class=rvts265>trap</span><span class=rvts262>(</span><span class=rvts266>"INT"</span><span class=rvts262>){ server.shutdown }              </span><span class=rvts263># add a SIGKILL event handler</span></p>
<p class=rvps12><span class=rvts262>server.start                                </span><span class=rvts263># start the server</span></p>
<p class=rvps12><span class=rvts263><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection2'>HTTP client with net/http</div>
<p><span class=rvts264><br></span></p>
<p class=rvps12><span class=rvts265>require</span><span class=rvts262> </span><span class=rvts266>'net/http'</span><span class=rvts262>                          </span><span class=rvts263># standard library</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts262>url = </span><span class=rvts267>URI</span><span class=rvts262>.parse(</span><span class=rvts266>'</span><a class=rvts272 href="https://web.de/mail">https://web.de/mail</a><span class=rvts266>'</span><span class=rvts262>)      </span><span class=rvts263># parse address into a URL object</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts262>http = </span><span class=rvts267>Net</span><span class=rvts262>::HTTP                            </span><span class=rvts263># standard HTTP client</span></p>
<p class=rvps12><span class=rvts263># http = Net::HTTP::Proxy('proxy', 8080)      # HTTP client that routes through a web proxy</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts262>response = http.get_response(url)           </span><span class=rvts263># submit a GET request</span></p>
<p class=rvps12><span class=rvts262>response = http.post_form(url, {            </span><span class=rvts263># submit a POST request</span></p>
<p class=rvps12><span class=rvts262>  </span><span class=rvts266>'name'</span><span class=rvts262> =&gt; </span><span class=rvts266>'David'</span><span class=rvts262>, </span><span class=rvts266>'country'</span><span class=rvts262> =&gt; </span><span class=rvts266>'AU'</span><span class=rvts262>      </span><span class=rvts263># ...with form fields</span></p>
<p class=rvps12><span class=rvts262>})</span></p>
<p class=rvps12><span class=rvts262>body = response.body.force_encoding(</span><span class=rvts266>"UTF-8"</span><span class=rvts262>)</span><span class=rvts263># retrieve the response body</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps18><span class=rvts268><br></span></p>
<p><span class=rvts268><br></span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts267>Net</span><span class=rvts262>::</span><span class=rvts267>HTTP</span><span class=rvts262>.start(                            </span><span class=rvts263># manually configure and use the connection</span></p>
<p class=rvps12><span class=rvts262>  </span><span class=rvts266>'web.de'</span><span class=rvts262>, 443, use_ssl: </span><span class=rvts265>true</span></p>
<p class=rvps12><span class=rvts262>) </span><span class=rvts265>do</span><span class=rvts262> |http|</span></p>
<p class=rvps12><span class=rvts262>  request = </span><span class=rvts267>Net</span><span class=rvts262>::</span><span class=rvts267>HTTP</span><span class=rvts262>::</span><span class=rvts267>Get</span><span class=rvts262>.</span><span class=rvts265>new</span><span class=rvts262>(</span><span class=rvts266>'/mail'</span><span class=rvts262>)     </span><span class=rvts263># verb (get, post, put, ...) and request path</span></p>
<p class=rvps12><span class=rvts262>  request.basic_auth(</span><span class=rvts266>'user'</span><span class=rvts262>, </span><span class=rvts266>'password'</span><span class=rvts262>)    </span><span class=rvts263># basic authentication</span></p>
<p class=rvps12><span class=rvts262>  request.set_form_data({                   </span><span class=rvts263># push form data into the body</span></p>
<p class=rvps12><span class=rvts262>    </span><span class=rvts266>'name'</span><span class=rvts262> =&gt; </span><span class=rvts266>'David'</span><span class=rvts262>, </span><span class=rvts266>'age'</span><span class=rvts262> =&gt; </span><span class=rvts266>'24'</span></p>
<p class=rvps12><span class=rvts262>  })</span></p>
<p class=rvps12><span class=rvts262>  response = http.request(request)          </span><span class=rvts263># send the request and get the response</span></p>
<p class=rvps12><span class=rvts262>  </span><span class=rvts265>puts</span><span class=rvts262> response.body.force_encoding(</span><span class=rvts266>"UTF-8"</span><span class=rvts262>)</span><span class=rvts263># retrieve the response body</span></p>
<p class=rvps12><span class=rvts265>end</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps18><span class=rvts268><br></span></p>
<p><span class=rvts268><br></span></p>
<p><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts265>case</span><span class=rvts262> response                               </span><span class=rvts263># evaluate the response status</span></p>
<p class=rvps12><span class=rvts265>when</span><span class=rvts262> </span><span class=rvts267>Net</span><span class=rvts262>::HTTPSuccess</span></p>
<p class=rvps12><span class=rvts262>  response.body.force_encoding(</span><span class=rvts266>"UTF-8"</span><span class=rvts262>)     </span><span class=rvts263># the response</span></p>
<p class=rvps12><span class=rvts265>when</span><span class=rvts262> </span><span class=rvts267>Net</span><span class=rvts262>::HTTPRedirection</span></p>
<p class=rvps12><span class=rvts262>  response[</span><span class=rvts266>'Location'</span><span class=rvts262>]                      </span><span class=rvts263># the redirect URL</span></p>
<p class=rvps12><span class=rvts265>else</span></p>
<p class=rvps12><span class=rvts262>  </span><span class=rvts265>return</span><span class=rvts262> </span><span class=rvts265>nil</span><span class=rvts262>                                </span><span class=rvts263># could be Net::HTTPNotFound, Net::HTTPForbidden, ...</span></p>
<p class=rvps12><span class=rvts265>end</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p><span class=rvts9><br></span></p>
<div id='nodeSection3'>HTTP client with open-uri</div>
<p><span class=rvts264><br></span></p>
<p class=rvps12><span class=rvts265>require</span><span class=rvts262> </span><span class=rvts266>'open-uri'</span><span class=rvts262>                          </span><span class=rvts263># Standard library</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts262>stream = </span><span class=rvts267>URI</span><span class=rvts262>.</span><span class=rvts265>open</span><span class=rvts262>(                          </span><span class=rvts263># open a URL like a file stream</span></p>
<p class=rvps12><span class=rvts262>  </span><span class=rvts266>'</span><a class=rvts272 href="https://google.com/">https://google.com/</a><span class=rvts266>'</span><span class=rvts262>,                    </span><span class=rvts263># the URL to request</span></p>
<p class=rvps12><span class=rvts262>  { </span><span class=rvts266>'Authorization'</span><span class=rvts262> =&gt; </span><span class=rvts266>'Bearer 1234'</span><span class=rvts262> }      </span><span class=rvts263># optional: HTTP request heders</span></p>
<p class=rvps12><span class=rvts262>)</span></p>
<p class=rvps12><span class=rvts263># ...                                       # use the stream</span></p>
<p class=rvps12><span class=rvts262>stream.close                                </span><span class=rvts263># close the stream</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts267>URI</span><span class=rvts262>.</span><span class=rvts265>open</span><span class=rvts262>(</span><span class=rvts266>'</span><a class=rvts272 href="https://google.com/">https://google.com/</a><span class=rvts266>'</span><span class=rvts262>) </span><span class=rvts265>do</span><span class=rvts262> |stream| </span><span class=rvts263># or handle the stream in a code block</span></p>
<p class=rvps12><span class=rvts262>  </span><span class=rvts263># ...                                     # use the stream</span></p>
<p class=rvps12><span class=rvts265>end</span><span class=rvts262>                                         </span><span class=rvts263># the stream is closed automatically</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps18><span class=rvts268><br></span></p>
<p><span class=rvts268><br></span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p class=rvps12><span class=rvts262>stream.size                                 </span><span class=rvts263># the response's content length in bytes (int)</span></p>
<p class=rvps12><span class=rvts262>stream.content_type                         </span><span class=rvts263># the content type, e. g text/html</span></p>
<p class=rvps12><span class=rvts262>stream.last_modified.class                  </span><span class=rvts263># might be nil</span></p>
<p class=rvps12><span class=rvts262>stream.</span><span class=rvts265>readlines</span><span class=rvts262>                            </span><span class=rvts263># get the response as an array of lines</span></p>
<p class=rvps12><span class=rvts262>stream.each_line { |line| </span><span class=rvts265>puts</span><span class=rvts262> line }       </span><span class=rvts263># iterate over all response lines</span></p>
<p class=rvps12><span class=rvts262><br></span></p>
<p><br></p>
<p><br></p>

